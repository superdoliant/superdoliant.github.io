<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Doliant&#39;s Meditation World</title>
  
  <subtitle>我心中曾经执剑的少年，此刻也混迹在市井之间</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-09T06:49:19.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Doliant</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我的2018</title>
    <link href="http://yoursite.com/2019/02/09/%E6%88%91%E7%9A%842018/"/>
    <id>http://yoursite.com/2019/02/09/我的2018/</id>
    <published>2019-02-09T06:06:05.000Z</published>
    <updated>2019-02-09T06:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2019/02/07/ktwDYt.jpg" alt="图片来自Pinterest"></p><blockquote><p>写本文的时候看了下去年的年度总结,完成时间是在3月份，这份总结跟去年相比也算提前了，不过年度总结还是应该在新年的首月完成，拖延症欠下的债便只能用春节的假期来弥补了。</p></blockquote><blockquote><p>以往的年度总结都是以时间线来进行的，这次换个写法按主题叙述。</p></blockquote><a id="more"></a><h2 id="基本盘"><a href="#基本盘" class="headerlink" title="基本盘"></a>基本盘</h2><p>从毕业伊始到现在一直坚持的事情有三件:</p><ol><li>记账(Toshl高级账户已经开了两年多, 月度财务报表也坚持在做)</li><li>日记(印象笔记条目数在18年已然超过2000，每年日记数360+)</li><li>运动(之前间歇的长距离有氧，18年健身一直没断过)</li></ol><p>看着一条条增长的笔记条目、打卡记录、报表，也算是对过去的岁月有一个清晰的交待。很多事情难的并不是从<code>0-1</code>的过程，而是在漫长无聊岁月中的坚持，到目前为止就这一点而言自己还算满意。</p><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>想起以前看到过一句话:</p><blockquote><p><strong>技术对公司的影响，短期内总是被高估，长期总是被低估。</strong></p></blockquote><p>从目前的市场情况来看似乎是这个道理，短期内靠技术出产品，长期却从没有对整个技术栈的总体规划。可能这也和目前国内环境普遍急功近利有关，出一个原型的产品就好去和投资人谈钱的事情，但钱拿到以后往往就放弃对技术的投入了，这是件相当尴尬的事情。</p><p>就我个人短暂的从业经验看来，现在<code>IT</code>企业再具体些就是互联网企业，无非是以下三类公司：</p><ol><li><p><strong>业务型</strong></p></li><li><p><strong>技术型</strong></p></li><li><p><strong>混合型</strong></p></li></ol><ul><li><strong>业务型</strong>公司应该占市场的绝大多数，大多都叫<code>***</code>科技公司、各类外包公司等；</li><li><strong>技术型</strong>公司就是针对某一类垂直领域为开发者提供技术解决方案的公司: 人脸识别、语音识别等等各类SDK</li><li><strong>混合型</strong>这一类别的公司基本都是巨头了<code>FLAG</code>、<code>BAT</code>等等，这一级别的公司数量屈指可数。</li></ul><p>技术对这几类公司的重要性是逐渐递增的，入职难度也是一样。</p><p><code>IT技术</code>总归而言是一种工具，也是一种依靠劳动力生产方式。比起其他技能比如<code>乐器</code>、<code>运动</code>等具有一个即是优点也是致命缺陷的特点<strong>迭代速度快，可继承能力差</strong>。特别是应用层，变化速度可能是以月为单位来计量的。</p><p>可能有人会说是因为没有接触到计算机科学的最本质的东西，的确越偏向底层迭代的速度就会慢一些，计算机发展这么多年也没逃离<code>John von Neumann</code>的体系结构，主流硬件无非还是基于<code>X86</code>、<code>ARM</code>架构的，<strong>设计模式</strong>、<strong>编译原理</strong>、<strong>算法</strong>等核心理论依旧常青。</p><p>对以上说的也都没错，可是偌大的市场有多少底层开发从业者。市场对应用层的需求往往是最大的，<code>VB</code>、<code>C</code>等底层语言就可以干绝大部分事情了，为什么还要开发高级语言、各种框架？–<strong>为了业务发展以及开发速度的需要</strong>。</p><p>新编程语言及框架是否具有可继承性？部分有。若你练20年钢琴可能成为一个优秀的钢琴家，但是你20年只用一种开发语言和框架那基本就凉凉了。</p><p>总结下来就是计算机科学的基础理论是具有可继承性的，越靠近上层可继承性就越差，而大部分的从业者都是做应用层开发的。</p><p><strong>高迭代速度对整个产业发展的影响是正面的，它可以使产业长期处于年轻态。但对个人的发展并不是完全正面的，毕竟人要遵从自然规律，无法一直保持高速学习状态</strong>。这也是大部分<code>IT</code>从业人员危机的来源，毕竟去年<code>IT</code>行业产生了很多由于行业<code>年龄歧视</code>引发的悲剧。</p><p>就我个人而言，随着年岁的增长，无可避免的要开始面对这类问题。<br>虽然对技术的还是抱有极大的热情和兴趣，生活却不是仅靠热情和兴趣就能继续下去的。</p><h3 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h3><h4 id="整体趋势"><a href="#整体趋势" class="headerlink" title="整体趋势"></a>整体趋势</h4><p>移动端从07年开始迅猛发展，到了17年已经整整10年了。18年智能手机的出货量整体下降(降幅<strong>10%</strong>左右)，就连<code>Apple</code>这个移动互联网时代的霸主也开始卖不动<code>iPhone</code>了，说明现在的智能手机的市场已经趋于饱和。</p><p>移动开发的未来也终将和桌面软件开发一样，需求依然有但用来用去就那么几个软件，令人惊喜的新软件将会越来越少，大部分开发从业者逐渐成为维护、迭代工程师。若是市场饱和继续这样下去而不做些什么找到满意工作的概率会变得相当渺茫。</p><h4 id="iOS开发"><a href="#iOS开发" class="headerlink" title="iOS开发"></a>iOS开发</h4><p>单论<code>iOS</code>开发15年之后每年就都是寒冬了，大环境整体不佳<code>iOS</code>开发境况更为严峻。</p><p>过去一年整个<code>Apple</code> 的发展进入慢车道，与之强关联的开发环境也无太多创新，无论是<code>WWDC</code>还是<code>Apple</code>的个场发布会，都没有让人感觉惊喜。</p><ol><li><p><strong>Swift or Objective-C</strong>:</p><p> 今年Swift的更新乏善可陈，version5没有release,ABI不够稳定现有项目迁移成本巨大，向下依旧不兼容。</p><p> Objective-C大有复辟之势，之前有个段子说如何让自己写的SDK兼容Swift1、2、3、4，答案是使用Objective-C。虽然Apple近几年来把大部分的精力花在了Swift上,可OC经历了10多年的发展，已经构建了相当完善的框架体系，颇有种瘦死的骆驼比马大的既视感。</p><p> 就公司而言LinkedIn从Swift迁移回OBJC与Facebook、twitter一道成为了Objective-C的卫道者。稍微大一些的公司都对Swift持观望态度，毕竟之前在OC上的技术积累完全迁移成本实在太高昂了。</p><p> 个人认为Swift在业务层面的开发效率还是比OC要高的，语法糖比OC更友善易用。等今年Swift5发布了，ABI稳定之后应该能有更长远的发展空间。毕竟任何语言的发展都离不开巨头的支持，不然这门语言的路没法走得太远。</p></li><li><p><strong>New Frameworks</strong>:</p><p>去年的开发者大会依旧是专注于AI和AR,看来苹果是准备在AI层面上下重注了。不论是Tensorflow Swift,还是优化过的CoreML以及Siri Kit,都显示了苹果发力的决心。</p><p>不过目前看来把机器学习的东西完全放在手机上做不太现实，主要问题是动态性不高，必须使用已经训练完成的模型。若在手机上实时去训练模型，消耗太高且不说算力就是电池的能耗也无法支撑。</p><p>AR除了游戏行业能发力以外，我也没能看到其他的应用场景，说实话AR技术就比较适合拿来做玩具。若是做游戏开发的话，基本也是<code>Unity</code>那一套生态，大概率不会用原生iOS来开发。</p></li></ol><h4 id="未来方向"><a href="#未来方向" class="headerlink" title="未来方向"></a>未来方向</h4><p>今年Google的Flutter跨平台框架展现出了巨大的影响力，12月底发布了正式的1.0版本。这款以Dart作为开发语言、承载了谷歌系统级战略的框架，配合以谷歌自家的Fuchsia OS很难想象以后会在科技领域掀起什么风浪，都是在为未来5-10年谋划。</p><p>Dart语言预编译以及高兼容，使得其在iOS设备上可以无缝高速运转。与RN不同可以绕过JSCore在机器上直接进行图形渲染，不会产生桥接性能损耗的问题媲美原生开发。不过目前而言框架推出时间还不长，配套肯定还是不如原生完善，不过依旧是值得一试的框架。</p><p>可是在接下来的1、2年之内，整个通讯产业就要进入5G的时代了。当网速足够快的时候，APP存在的意义就不如网站和浏览器了。前些年一直不温不火的PWA(Progressive Web App)，或许会成为主流。毕竟每次速度的提升，不管是硬件、软件还是网络，都足以带来一次技术变革。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>18年移动浪潮已趋于平稳，市场需求已然饱和。需要审慎思考，规划自己未来的方向。在埋头苦干的同时也要抬头看看方向，及时调整战略并不断的学习。</p><h2 id="身体-amp-精神"><a href="#身体-amp-精神" class="headerlink" title="身体&amp;精神"></a>身体&amp;精神</h2><blockquote><p>身体和精神总是相辅相成的</p></blockquote><h3 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h3><p>在大学时代就开始健身，那个时候和小bo、宇儿在寝室里面练器材，在学校操场上做腹肌撕裂者。在工作的前两年时不时还和班长去奥森进行长距离有氧，不过次数和大学相比少了不少。</p><h4 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h4><p>今年密集高强度健身的缘由是公司在四月份的时候项目工期太紧，长时间加班导致身体出现一系列反应如心悸、虚喘、乏力。为了避免情况继续恶化，必须重启健身事业。先游了一个月游泳恢复心肺功能，再上无氧塑造体魄。</p><h4 id="成果"><a href="#成果" class="headerlink" title="成果:"></a>成果:</h4><ol><li>体脂从<strong>19%</strong>降低到<strong>13.4%</strong>，</li><li>肌肉量从<strong>不足</strong>增长为<strong>高标准</strong>，</li><li>不间断游完<strong>2000米</strong>，不到1小时。</li></ol><p>在锻炼过程中也在不断地完善相关知识体系，看完了《施瓦辛格健身全书》、《囚徒健身》，对饮食和营养有了更深刻的认识。了解了多种训练方法及训练原则：</p><ul><li>冲击原则</li><li>强迫次数</li><li>负功训练</li><li>强迫负功训练</li><li>超级组</li><li>递减组<br>等一系列方法论。</li></ul><p>任何一个行业都有自己一套方法论，随着训练不断深入，越发感受到其中的复杂。</p><p>其实健身并不如大众想象中的那么简单，不论<code>增肌</code>、<code>减脂</code>、<code>塑型</code>都有相对应的训练系统，同时和食物营养物的摄入强相关。毕竟人体也是最复杂的系统之一，想要达到目的不付出努力和汗水是不可能的。</p><h3 id="精神"><a href="#精神" class="headerlink" title="精神"></a>精神</h3><p>这一部分我想把精神和精力放在一起叙述，我个人的观点认为时间并不是我们每天最主要的资源，每个人每天的时间客观上是一致的都是24小时。而在这固定的24小时的时间中，产生作用的是我们的精力。我们每天的精力都是相当有限的，除去睡觉的时间也不能覆盖完所有的时间。因此，对于精力的管理也是相当重要的，这里的精力包括注意力等心理活动，由于没有系统地学习过心理学，语言描述未必准确。</p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>在富媒体泛滥的年代，长时间集中注意力是件相当奢侈的事情。若无法长时间集中注意力，很难提高效率。同时由于注意力的分散，切换各项任务需要时间准备上下文，造成时间的浪费，人也更容易感觉到疲惫。</p><h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><ol><li><strong>减少Feed流信息的流入</strong>，少看各种新闻推送。以前是网易新闻的重度用户，可近几年来内容质量越来越差，以至于想放弃使用。目前好奇心日报是一个不错的替代选项。</li><li><strong>RSS主动订阅</strong>，自主寻找有意义的博主和文章，确保内容的高质量。还想过通过机器学习的方式来进行内容筛选，但调研之后发现我的需求SPAM过滤基本可以实现。机器学习需要大量的数据进行训练，而我又无法提供足够大的数据量来训练，识别率肯定上不去。</li><li><strong>选择长文阅读</strong>，有种回到web1.0阅读博客的时代，长文才携带有更充足和有价值的信息量，比起短新闻之类的东西没有上下文切换的成本。<code>Medium</code>就是一个很好的博客阅读平台，各个方向都有，也不像国内的媒体为了点击量各种标题党。</li><li><strong>拒绝短视频</strong>，抖音、快手一类的短视频应用我基本都不用，每一个短视频都会给大脑短时的刺激，时间长了注意力更不容易集中。长期沉迷大脑就无法接受长文、长视频这类媒介，而大部分知识技能都是通过这类媒介传播。</li><li><strong>GTD任务规划</strong>，这一部分目前还没有做好，包括任务时间的分配，以及执行上都有很大的阻力。这套理论是一套很优秀的理论，还需要时间转化成我本人的方法论。</li><li><strong>坚持锻炼</strong>，体育锻炼既可以达到解压的目的，同时也可以帮助注意力的集中和精神的恢复。</li></ol><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>提高身体素质、丰富精神世界乃是刚需。在新的一年里，更须在这两个方面做更多努力。</p><h2 id="技能-amp-阅读"><a href="#技能-amp-阅读" class="headerlink" title="技能&amp;阅读"></a>技能&amp;阅读</h2><h3 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h3><p>18年改变了自己一直以来的输入方式，从<strong>全拼</strong>切换到<strong>双拼</strong>。重新经历了一遍看着键盘打字的时代，从最初需要查表打字的状态，到现在熟练使用双拼盲打，还是经历了一番挣扎所幸消耗时间不是太长。</p><p>采用双拼之后打字速度比之前使用全拼快了不少，毕竟击键次数要比全拼少很多。在准确率上还有一些挣扎，再过一段时间肯定又会好很多了。</p><p><strong>标准指法</strong>一直感觉自己的击键指法不标准，误触的次数有些高。就想着进行标准指法的矫正，使用了一些web app之后有所好转。但改变习惯真的太难了，长时间击键之后往往又会回到原来的样子。这项技能的习得算是以失败告终了，还是需要一段时间的刻意训练才能取得成果。</p><p>新的一年希望能习得如下技能：</p><ol><li><strong>Anki</strong></li><li><strong>乐理</strong></li><li><strong>PS</strong></li></ol><h3 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h3><p>18年阅读做得相当不好，看自己读书笔记增长条目，17年是阅读书目最多的一年。</p><p>18年算上专业书籍的阅读满打满算也就五本，17年生活的琐事比较多还能保持高阅读频率。18年琐事少了好些却没能读几本书，时间大部分都花在娱乐上了。</p><p>19年至少得保证每月阅读一本书，一年下来12本保底。</p><p>19年阅读偏好方向: 1.<strong>心理学</strong>; 2.<strong>哲学</strong>。</p><p>知识的输入相当重要，有输入才会有输出。年纪在不断地增长，知识技能也必须得有相应的成长。</p><h2 id="旅行"><a href="#旅行" class="headerlink" title="旅行"></a>旅行</h2><p>由于个人的懒惰，18年这项内容一片空白。</p><h2 id="总结展望"><a href="#总结展望" class="headerlink" title="总结展望"></a>总结展望</h2><p>18年部分条目量化指标做得还行，还有好些条目的状态比较模糊。</p><p>19年需要尽早明确任务，订立量化指标，方便复盘一年下来的个人成长。</p><p>19年要坚持前些年积累下来的好习惯，阅读量和技能习得都需在平日渐进，减少娱乐时间提高利用率，规划好自己每天的精力分配。</p><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢木木在我写此篇总结的时候喂我吃水果。</p><h2 id="MileStone"><a href="#MileStone" class="headerlink" title="MileStone"></a>MileStone</h2><p>9月参加了一场黑客松，体验了一把极限编程，在deadline的驱动下编码效率出乎意料的高。一个词总结就是–刺激！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/02/07/ktwDYt.jpg&quot; alt=&quot;图片来自Pinterest&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;写本文的时候看了下去年的年度总结,完成时间是在3月份，这份总结跟去年相比也算提前了，不过年度总结还是应该在新年的首月完成，拖延症欠下的债便只能用春节的假期来弥补了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以往的年度总结都是以时间线来进行的，这次换个写法按主题叙述。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="other" scheme="http://yoursite.com/categories/other/"/>
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>利用fastlane进行项目的自动化构建</title>
    <link href="http://yoursite.com/2018/05/19/%E5%88%A9%E7%94%A8fastlane%E8%BF%9B%E8%A1%8C%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/05/19/利用fastlane进行项目的自动化构建/</id>
    <published>2018-05-19T09:10:57.000Z</published>
    <updated>2019-04-16T08:14:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2019/02/07/ktw6l8.png" alt="fastlane"></p><blockquote><p>在一个iOS项目进行到了测试和发布阶段，一般都会经历一次又一次的打包-截图-上传及metadata填写及修改的过程。这点做服务器开发的同学就要比我们幸福太多了，因为这一部分的工作他们可以交付给运维同学来完成。那我们就只能自己手动去做这些重复且耗时的操作了么？答案并不是，fastlane就给我们提供了一整套工具来帮助我们实现自动化。</p></blockquote> <a id="more"></a><h1 id="一、Fastlane简介及配置安装"><a href="#一、Fastlane简介及配置安装" class="headerlink" title="一、Fastlane简介及配置安装"></a>一、Fastlane简介及配置安装</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p><code>fastlane</code>是一套基于<code>ruby</code>开发的自动化构建工具，为项目的发布流程提供一整套解决方案。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><h3 id="2-1-确保安装了最新版的Xcode-command-line-tools"><a href="#2-1-确保安装了最新版的Xcode-command-line-tools" class="headerlink" title="2.1 确保安装了最新版的Xcode command line tools"></a>2.1 确保安装了最新版的Xcode command line tools</h3><p>对使用<code>Xcode</code>进行开发的<code>iOS</code>开发者是标配，若发现提示没有安装的话尝试使用以下命令安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><h3 id="2-2-选择安装方式"><a href="#2-2-选择安装方式" class="headerlink" title="2.2 选择安装方式"></a>2.2 选择安装方式</h3><p>安装方式一共有三种:</p><table><thead><tr><th>homebrew</th><th>installer script</th><th>RubyGem</th></tr></thead><tbody><tr><td>brew cask install fastlane</td><td>下载安装包，运行安装脚本</td><td>sudo gem install fastlane -NV</td></tr></tbody></table><p>笔者项目中都使用到了<code>cocoapods</code>本地有<code>Ruby</code>环境，因此选择了第三种安装方案</p><h3 id="2-3-安装bundler"><a href="#2-3-安装bundler" class="headerlink" title="2.3 安装bundler"></a>2.3 安装bundler</h3><p>若你的<code>ruby</code>环境中没有安装<code>bundler</code>,执行以下命令安装<code>bundler</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install bundler</span><br></pre></td></tr></table></figure><h2 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h2><p>进入项目的根目录中</p><h3 id="3-1-初始化"><a href="#3-1-初始化" class="headerlink" title="3.1 初始化"></a>3.1 初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane init</span><br></pre></td></tr></table></figure><p>初始化的过程中会询问您的<code>APPID</code>和密码，请放心它只会把密码信息存在本地的<code>keychain</code>中，并不会传到云端服务器。</p><p>初始化的过程中会有四个选项,分别是为四种不同的任务创建配置：</p><ol><li>自动化截图</li><li>自动创建<code>TestFlight</code>测试版发布项目</li><li>自动创建<code>Appstore</code>发布项目</li><li>手动设置自己需要任务的配置</li></ol><p>第一次创建可以选择第三项，它会自动检测当前项目的<code>App Name</code>和<code>App bundleID</code>并输出在控制台，若信息有误可以在确认信息的时候选择<code>n</code>然后去配置文件中手动编辑。接着会询问是否需要在<code>ITU</code>和<code>ADC</code>中创建项目，若选择了<code>y</code>会生成类似下图的目录结构，其中<code>Appfile</code>和<code>Fastfile</code>这两个核心文件必然会被创建。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">fastlane</span><br><span class="line">├── Appfile</span><br><span class="line">├── Deliverfile</span><br><span class="line">├── Fastfile</span><br><span class="line">├── metadata</span><br><span class="line">│   ├── copyright.txt</span><br><span class="line">│   ├── en-US</span><br><span class="line">│   │   ├── description.txt</span><br><span class="line">│   │   ├── keywords.txt</span><br><span class="line">│   │   ├── marketing_url.txt</span><br><span class="line">│   │   ├── name.txt</span><br><span class="line">│   │   ├── privacy_url.txt</span><br><span class="line">│   │   ├── release_notes.txt</span><br><span class="line">│   │   └── support_url.txt</span><br><span class="line">│   ├── primary_category.txt</span><br><span class="line">│   ├── primary_first_sub_category.txt</span><br><span class="line">│   ├── primary_second_sub_category.txt</span><br><span class="line">│   ├── secondary_category.txt</span><br><span class="line">│   ├── secondary_first_sub_category.txt</span><br><span class="line">│   ├── secondary_second_sub_category.txt</span><br><span class="line">│   └── zh-Hans</span><br><span class="line">│       ├── description.txt</span><br><span class="line">│       ├── keywords.txt</span><br><span class="line">│       ├── marketing_url.txt</span><br><span class="line">│       ├── name.txt</span><br><span class="line">│       ├── privacy_url.txt</span><br><span class="line">│       ├── release_notes.txt</span><br><span class="line">│       └── support_url.txt</span><br><span class="line">└── screenshots</span><br><span class="line">    ├── README.txt</span><br></pre></td></tr></table></figure><p>若选择了<code>n</code>可以在之后使用<code>fastlane</code>提供的对应功能的命令来生成配置文件。</p><p>笔者已经习惯了自己手动去设置相关的配置文件，一般都直接使用第四种方式创建任务。</p><h3 id="3-2-使用Gemfile管理fastlane的版本和依赖"><a href="#3-2-使用Gemfile管理fastlane的版本和依赖" class="headerlink" title="3.2 使用Gemfile管理fastlane的版本和依赖"></a>3.2 使用Gemfile管理fastlane的版本和依赖</h3><p>同<code>cocoapods</code>一样，<code>fastlane</code>也可以使用<code>Gemfile</code>来管理对应的版本和依赖。</p><p>在执行<code>init</code>操作的时候会自动生成一个<code>Gemfile</code>内容如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source <span class="string">"https://rubygems.org"</span></span><br><span class="line"></span><br><span class="line">gem <span class="string">"fastlane"</span></span><br></pre></td></tr></table></figure><p>可以直接在此处指定<code>fastlane</code>的版本信息。</p><p>致辞我们的初始化操作就完成了。</p><h1 id="二、Fastlane的理念及组件"><a href="#二、Fastlane的理念及组件" class="headerlink" title="二、Fastlane的理念及组件"></a>二、Fastlane的理念及组件</h1><p>在上一步初始化的操作中，生成了两个核心文件<code>Appfile</code>以及<code>Fastfile</code>,其中<code>Appfile</code>存放的是你<code>app</code>的<code>bundleID</code>以及<code>appID</code>。</p><p><code>Fastfile</code>是我们实际的自动化流程操作实现文件，我们会将相关动作在其中实现。</p><h2 id="1-理念"><a href="#1-理念" class="headerlink" title="1.理念"></a>1.理念</h2><p>在<code>Fastlane</code>有两个重要的概念：</p><ul><li>action： 每一个动作就是action，对应一条命令。</li><li>lane: 某个操作流程，比如发布<code>appstore</code>的包的一系列<code>action</code>集合是一个lane，发布<code>adhoc</code>包又是一个lane</li></ul><p>当运行<code>fastlane</code>命令行工具的时候会读取<code>fastlane</code>目录下的<code>Fastfile</code>文件，执行相应<code>lane</code>中的<code>action</code>操作</p><p>一个简单的流程：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lane <span class="symbol">:dependence_manager</span> <span class="keyword">do</span></span><br><span class="line"><span class="comment"># 执行cocoapods属于一个action</span></span><br><span class="line">cocoapods</span><br><span class="line"><span class="comment"># 执行carthage属于一个action</span></span><br><span class="line">carthage</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="2-组件"><a href="#2-组件" class="headerlink" title="2.组件"></a>2.组件</h2><p><code>fastlane</code>提供了一套工具集，涵盖了发布流程大多数可能会使用到的操作，主要包括几个大类：</p><ul><li>测试: <code>scan</code>-自动生成测试工具，并可以生成<code>HTML</code>报告</li><li>构建: <code>gym</code>-项目打包工具、<code>cocoapod</code>-执行<code>pod install</code>操作</li><li>截图: <code>snapshot</code>-截图工具(需要编写UI测试)、<code>framekit</code>-生成带边框的截图</li><li>项目: <code>increment_build_number</code>:增加项目构建次数</li><li>签名: <code>match</code>-同步签名信息和项目<code>provision profile</code>、<code>cert</code>-同步<code>ADC</code>中的证书信息、<code>register_device</code>-向<code>ADC</code>中添加新的设备</li><li>文档: <code>appledoc</code>-根据源码生成<code>Apple</code>风格的代码文档</li><li>Beta: <code>testflight</code>-将项目发布至<code>testflight</code></li><li>推送: <code>pem</code>-获取推送证书</li><li>发布: <code>deliver</code>-将项目发布至<code>appstore</code>等</li><li>版本控制: <code>git pull</code>-这就不用解释了</li><li>通知: <code>Slack</code>-将打包信息告知你的开发组</li></ul><p><code>fastlane</code>提供的工具非常之多，以上只列举了部分常用的组件，想了解更多请访问<a href="https://docs.fastlane.tools/actions/" target="_blank" rel="noopener">Fastlane Actions文档</a></p><h2 id="3-第三方插件"><a href="#3-第三方插件" class="headerlink" title="3.第三方插件"></a>3.第三方插件</h2><p><code>fastlane</code>内部提供了足够多的工具，同时也支持第三方的插件接入。可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane search_plugins</span><br></pre></td></tr></table></figure><p>命令来查看所有可用第三方插件。</p><p>这里介绍两个最常用的插件：</p><ul><li>firim: 将测试包发布到<code>firim</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane add_plugin firim</span><br></pre></td></tr></table></figure><ul><li>pgyer: 将测试包发布到蒲公英</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane add_plugin pgyer</span><br></pre></td></tr></table></figure><h1 id="三、Fastlane实践之旅"><a href="#三、Fastlane实践之旅" class="headerlink" title="三、Fastlane实践之旅"></a>三、Fastlane实践之旅</h1><p>由于<code>fastlane</code>提供的组件相当之多，项目实践中并不一定都能用上。比如<code>snapshot</code>截图工具，由于公司的宣传页面都是使用的<code>UI</code>切图，笔者也一直没有具体实践的机会。这一部分只能介绍下笔者在项目中实际用过的组件，要是您想要了解的部分并没有被提及，<code>fastlane</code>提供了十分详细的文档可以参考。</p><h2 id="1-match-同步证书及provision-profile利器"><a href="#1-match-同步证书及provision-profile利器" class="headerlink" title="1.match-同步证书及provision profile利器"></a>1.match-同步证书及provision profile利器</h2><p>在多人开发的<code>iOS</code>项目中，大部分新手应该都闹出过删证书的笑话，尤其是一些小公司用的个人开发者账号去开发公司项目，成员之间就需要依靠证书的<code>P12</code>文件来进行证书的传递，这种方式效率又低管理又不方便。</p><p><code>fastlane</code>的<code>match</code>命令就提供了一套基于<code>git</code>的证书和<code>provision profile</code>管理方案。通过<code>match</code>生成的证书和<code>provision profile</code>将会同步到一个你指定的<code>git</code>地址，需要的成员通过<code>match</code>去下拉项目需要的证书到本地，<code>match</code>会自己负责和<code>ADC</code>证书及<code>provision profile</code>的同步操作。</p><h3 id="1-1-match初始化"><a href="#1-1-match初始化" class="headerlink" title="1.1 match初始化"></a>1.1 match初始化</h3><p>通过命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">match init</span><br></pre></td></tr></table></figure><p>会让你输入一个git地址，这个地址就是证书的存放位置，同时会在项目中的<code>fastlane</code>中创建一个<code>matchfile</code>与<code>Fastfile</code>同级，其中的内容就是此<code>git</code>地址</p><h3 id="1-2-生成证书和provision-profile"><a href="#1-2-生成证书和provision-profile" class="headerlink" title="1.2 生成证书和provision profile"></a>1.2 生成证书和provision profile</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成appstore发布证书及provision profile</span></span><br><span class="line">fastlane match appstore</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成adhoc发布证书及provision profile</span></span><br><span class="line">fastlane match adhoc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成调试证书</span></span><br><span class="line">fastlane match development</span><br></pre></td></tr></table></figure><p>这一步<code>match</code>会检测<code>ADC</code>中是否有需要的证书和<code>provision profile</code>要是有就直接下载到本地，要是没有就直接在<code>ADC</code>中创建</p><p><code>match</code>自动创建的<code>provision profile</code>如图：</p><p><img src="http://upload-images.jianshu.io/upload_images/2005687-b81c3e0c2da3b8d3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>完全不用自己手动在<code>ADC</code>中创建了是不是非常方面</p><h3 id="1-3-在Xcode中配置证书和provision-profile"><a href="#1-3-在Xcode中配置证书和provision-profile" class="headerlink" title="1.3 在Xcode中配置证书和provision profile"></a>1.3 在Xcode中配置证书和provision profile</h3><p>到了这一步其实就和手动创建配置证书一样了，就不再赘述。</p><h3 id="1-4-在Fastlanefile中配置证书操作的lane"><a href="#1-4-在Fastlanefile中配置证书操作的lane" class="headerlink" title="1.4 在Fastlanefile中配置证书操作的lane"></a>1.4 在Fastlanefile中配置证书操作的lane</h3><p>贴上在项目中的实际配置</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">desc <span class="string">"Init develope environment"</span></span><br><span class="line">  lane <span class="symbol">:config</span> <span class="keyword">do</span></span><br><span class="line">    match(<span class="symbol">type:</span> <span class="string">"appstore"</span>, <span class="symbol">app_identifier:</span> AppID, <span class="symbol">readonly:</span> <span class="literal">true</span>)</span><br><span class="line">    match(<span class="symbol">type:</span> <span class="string">"adhoc"</span>, <span class="symbol">app_identifier:</span> AppID, <span class="symbol">readonly:</span> <span class="literal">true</span>)</span><br><span class="line">    cocoapods</span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>以上配置完成之后，团队新加入成员或者更换了设备后只要执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane config</span><br></pre></td></tr></table></figure><p>命令即可同步整套开发发布环境，相当方便。</p><h2 id="2-sigh-选择正确的provision-profile"><a href="#2-sigh-选择正确的provision-profile" class="headerlink" title="2.sigh-选择正确的provision profile"></a>2.sigh-选择正确的provision profile</h2><p><code>match</code>将<code>provision profile</code>下载到本地，<code>sigh</code>在打包之前确认对应使用的<code>provision profile</code></p><p>用法如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sync_code_signing(<span class="symbol">type:</span> <span class="string">"appstore"</span>, </span><br><span class="line">                  <span class="symbol">readonly:</span> <span class="literal">true</span>, </span><br><span class="line">            <span class="symbol">app_identifier:</span> AppID)</span><br></pre></td></tr></table></figure><h2 id="3-gym-编译打包工具"><a href="#3-gym-编译打包工具" class="headerlink" title="3.gym-编译打包工具"></a>3.gym-编译打包工具</h2><p>此<code>action</code>就是对应的<code>Xcode</code>的<code>Archive</code>操作</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gym是build_app命令的一个别名</span></span><br><span class="line">build_app(<span class="symbol">workspace:</span> <span class="string">"xxxxxx.xcworkspace"</span>, </span><br><span class="line">              <span class="symbol">scheme:</span> <span class="string">"xxxxxxxx"</span>,</span><br><span class="line">              <span class="symbol">configuration:</span> <span class="string">"release"</span>,</span><br><span class="line">              <span class="comment"># 输出.ipa文件的路径</span></span><br><span class="line">              <span class="symbol">output_directory:</span> <span class="string">"./Package/AppStore"</span>,</span><br><span class="line">              <span class="symbol">export_method:</span> <span class="string">"app-store"</span>)</span><br></pre></td></tr></table></figure><h2 id="4-deliver-发布工具"><a href="#4-deliver-发布工具" class="headerlink" title="4.deliver-发布工具"></a>4.deliver-发布工具</h2><p>在<code>fastlane init</code>的时候若是没有允许<code>fastlane</code>自动同步项目在<code>ADC</code>中的<code>metadata</code>。可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane deliver init</span><br></pre></td></tr></table></figure><p>来创建<code>ADC</code>中需要的<code>metadata</code>文件，会在项目中的<code>fastlane</code>目录下创建<code>metadata</code>文件夹以及<code>Deliverfile</code>文件。</p><p>若是<code>ADC</code>中已经存在了<code>metadata</code>信息，则可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane deliver download_metadata</span><br></pre></td></tr></table></figure><p>来同步<code>ADC</code>上的metadata信息。</p><p><strong>注意</strong>：若是<code>ADC</code>中存在已经编辑好的<code>metadata</code>没有同步到本地，则<code>deliver</code>上去的<code>metadata</code>会覆盖原有的<code>metadata</code></p><p>实际在<code>Fastfile</code>中的用法很简单就一行代码：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># deliver是upload_to_app_store的一个别名两个方法用法一致</span></span><br><span class="line">upload_to_app_store</span><br></pre></td></tr></table></figure><h2 id="5-完整发布appstore的lane"><a href="#5-完整发布appstore的lane" class="headerlink" title="5.完整发布appstore的lane"></a>5.完整发布appstore的lane</h2><p><code>Fastfile</code>中如下:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">desc <span class="string">"upload release version"</span></span><br><span class="line">  lane <span class="symbol">:release</span> <span class="keyword">do</span></span><br><span class="line">    sync_code_signing(<span class="symbol">type:</span> <span class="string">"appstore"</span>, </span><br><span class="line">                  <span class="symbol">readonly:</span> <span class="literal">true</span>, </span><br><span class="line">            <span class="symbol">app_identifier:</span> AppID)</span><br><span class="line">    build_app(<span class="symbol">workspace:</span> <span class="string">"xxxxx.xcworkspace"</span>, </span><br><span class="line">              <span class="symbol">scheme:</span> <span class="string">"xxxxxxx"</span>,</span><br><span class="line">              <span class="symbol">configuration:</span> <span class="string">"release"</span>,</span><br><span class="line">              <span class="symbol">output_directory:</span> <span class="string">"./Package/AppStore"</span>,</span><br><span class="line">              <span class="symbol">export_method:</span> <span class="string">"app-store"</span>)</span><br><span class="line">    upload_to_app_store</span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>只要在命令行执行</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane release</span><br></pre></td></tr></table></figure><p>即可完全自动化发布的流程，极大的节省了开发者的时间。</p><h2 id="6-发布到firim或蒲公英"><a href="#6-发布到firim或蒲公英" class="headerlink" title="6.发布到firim或蒲公英"></a>6.发布到firim或蒲公英</h2><p>将<code>upload_to_app_store</code>替换为<code>firim</code>或<code>pgyer</code>插件提供的上传方法即可。</p><p><code>firim(firim_api_token:&quot;xxxxxxxxxxxxxxxxxx&quot;)</code></p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p><code>fastlane</code>是一套及其强大的自动化构建工具，善用<code>action</code>可以定制很多个性化操作，笔者只是抛砖引玉提供了一套满足最基本发布需求的方案。如果您有更好的方案，欢迎邮件交流。</p><p>由于笔者所在公司并没有专门的<code>iOS</code>打包机，很遗憾没有实践<code>fastlane</code>+<code>jekins</code>的机会。但身为软件开发工程师寻找更”轻松”的工作方式应该是我们一直以来的追求，笔者在今后的工作中也会持续在这个方向发力。</p><h1 id="五、参考文献"><a href="#五、参考文献" class="headerlink" title="五、参考文献"></a>五、参考文献</h1><p><strong>小团队的自动化发布</strong>: <a href="https://whlsxl.github.io/index.html" target="_blank" rel="noopener">https://whlsxl.github.io/index.html</a><br><strong>How to Set Up Fastlane</strong>: <a href="https://blog.metova.com/how-to-set-up-fastlane" target="_blank" rel="noopener">https://blog.metova.com/how-to-set-up-fastlane</a><br><strong>fastlane官方文档</strong>: <a href="https://docs.fastlane.tools/" target="_blank" rel="noopener">https://docs.fastlane.tools/</a></p><h1 id="六、缩写释义"><a href="#六、缩写释义" class="headerlink" title="六、缩写释义"></a>六、缩写释义</h1><p><strong>ADC</strong>: Apple Developer Center<br><strong>ITC</strong>: iTunes Connect</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/02/07/ktw6l8.png&quot; alt=&quot;fastlane&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在一个iOS项目进行到了测试和发布阶段，一般都会经历一次又一次的打包-截图-上传及metadata填写及修改的过程。这点做服务器开发的同学就要比我们幸福太多了，因为这一部分的工作他们可以交付给运维同学来完成。那我们就只能自己手动去做这些重复且耗时的操作了么？答案并不是，fastlane就给我们提供了一整套工具来帮助我们实现自动化。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="mobile development" scheme="http://yoursite.com/categories/mobile-development/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>将博客从Jekyll迁移至Hexo</title>
    <link href="http://yoursite.com/2018/03/31/%E5%B0%86%E5%8D%9A%E5%AE%A2%E4%BB%8EJekyll%E8%BF%81%E7%A7%BB%E8%87%B3Hexo/"/>
    <id>http://yoursite.com/2018/03/31/将博客从Jekyll迁移至Hexo/</id>
    <published>2018-03-31T14:06:36.000Z</published>
    <updated>2018-03-31T15:45:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><p>　　之前很久没有更新自己的博客了，想着每一年都应该写点东西记录自己的成长。于是在<code>2018</code>年第一季度快要过去的时候，打开了自己那个风格早就过时的<code>blog</code>准备重构。先简单介绍一下迁移前后的框架:</p><blockquote><p>jekyll: 一个基于<code>ruby</code>的博客框架，不会在本地渲染静态页面，需要将整个页面上传至<code>github.io</code>，由<code>github.io</code>去渲染。<br>Hexo: 由<code>node.js</code>构建的博客框架，会在本地渲染静态页面，再上传到<code>github.io</code>上。</p></blockquote><a id="more"></a><p>　　至于为什么要换框架，原因很简单就是我在配置<code>Ruby</code>环境的过程遇到了一个名为<code>nokogiri</code>的库安装一直不成功的问题。使用了<code>gem</code>和<code>boundle</code>安装都不行，这就导致了我无法在本机启动<code>jekyll</code>服务器来预览，这个问题还是比较麻烦的。自己平时也很少用<code>ruby</code>来进行开发，因此不太想把精力虚耗在这些事情上面，于是就果断的放弃选择了<code>Hexo</code>。　　</p><h1 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h1><blockquote><p>比较<code>Hexo</code>和<code>jekyll</code>的文档就能明显感觉到<code>Hexo</code>比<code>jekyll</code>更加现代，而且<code>Hexo</code>的中文文档也比较完善。</p></blockquote><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>基于<code>node.js</code>肯定需要有<code>node.js</code>,<code>git</code>更应该是开发人员的标准配置了。</p><h2 id="基本操作命令"><a href="#基本操作命令" class="headerlink" title="基本操作命令"></a>基本操作命令</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;name&gt;  //建立站点</span><br></pre></td></tr></table></figure><p>建完文件结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml    // hexo配置文件</span><br><span class="line">├── package.json   // 应用程序信息</span><br><span class="line">├── scaffolds      // 模版文件，新建的文章会由这个模版建立</span><br><span class="line">├── source         // 存放用户资源文件的位置：比如图片、CNAME等</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts     // 文章将会存放与这个位置</span><br><span class="line">└── themes         // 主题可以去`Hexo theme`下载</span><br></pre></td></tr></table></figure><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new &lt;article_name&gt;  // 生成新的文章</span><br><span class="line">hexo new page &lt;page_name&gt; // 生成新的HTML页面</span><br></pre></td></tr></table></figure><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate || hexo g //生成静态文件，在你的目录下会多出一个public文件夹</span><br></pre></td></tr></table></figure><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server // 在本地启动预览，默认访问地址为http://localhost:4000</span><br></pre></td></tr></table></figure><h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy || hexo d //启动部署</span><br></pre></td></tr></table></figure><p>由于我使用的<code>github.io</code>来搭建我的博客，因此我的部署位置就在<code>git</code>上,需要使用<code>hexo-deploy-git</code>工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deploy-git</span><br></pre></td></tr></table></figure></p><p>至于其他发布平台应该也有对应的工具。</p><p>安装完成之后在<code>_config.yml</code>中修改参数:　<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo: &lt;your repo&gt;</span><br></pre></td></tr></table></figure></p><p><strong>注</strong>:<code>YAML</code>和<code>python</code>都是严格要求缩进的，所以你懂得……</p><h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h2><p>由于是直接从<code>jekyll</code>迁移过来，之前的一整套架构都没有保留就把<code>Markdown</code>写的文章复制过来了。修改了<code>_config.yml</code>中的<code>new_post_name</code>参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_post_name: :year-:month-:day-:title.md</span><br></pre></td></tr></table></figure><p>这也是<code>Hexo</code>推荐的命名方式，加上时间比较方便归档及排序。</p><h1 id="其他一些tips"><a href="#其他一些tips" class="headerlink" title="其他一些tips"></a>其他一些tips</h1><p>上述过程熟悉之后，就可以正常的写<code>blog</code>发布了。我个人是一个崇尚极简生活的人，博客基本的发布表达功能完善之后就不太想去折腾什么评论之类的功能了。仅仅留下了一个邮箱作为自己的联系方式，交流的方式有很多种，以前在一些内容发布平台也通过评论结识了一些朋友。但个人博客我还是倾向于做成一个人的树洞空间，能顺便帮助到别人也是一件好事情。</p><h2 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h2><p>在<code>Hexo</code>文件夹下的<code>_config.yml</code>文件里面有一个<code>font</code>字段用来设置字体，可是尝试了几次之后发现并没有生效。<br>在<code>&lt;hexo_file&gt;/themes/&lt;your_theme&gt;/css/_variables/base.style</code>设置就可以成功</p><h2 id="CNAME消失的问题"><a href="#CNAME消失的问题" class="headerlink" title="CNAME消失的问题"></a>CNAME消失的问题</h2><p>在<code>jekyll</code>框架下是将整个本地文件都同步到<code>github.io</code>上，<code>hexo</code>是在本地渲染打包了一个<code>public</code>文件，将<code>public</code>文件上传到了<code>github.io</code>上。因此,<code>CNNAME</code>文件一定要放在<code>source</code>文件下才不会在发布的时候被删除掉。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p><code>hexo</code>有很多可以个性化的地方，不过我认为目前的状态已经可以满足我个人的需求了。要是再年轻几年应该还是会花大精力去折腾的，现在就感觉工具都差不多，重要的是美观和内容质量。</p><p>最近的工作离之前的<code>iOS</code>开发有点远，不过现在前端开发已经进入大前端时代了，不会点<code>js</code>框架感觉真的要掉队了哈哈。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><strong>Hexo官方文档</strong>:<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a></li><li><strong>NexT主题文档</strong>:<a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">https://theme-next.iissnan.com/getting-started.html</a></li><li><strong>部分文章</strong>:<a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009544924</a>等等……</li><li><strong>Google</strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动机&quot;&gt;&lt;a href=&quot;#动机&quot; class=&quot;headerlink&quot; title=&quot;动机&quot;&gt;&lt;/a&gt;动机&lt;/h1&gt;&lt;p&gt;　　之前很久没有更新自己的博客了，想着每一年都应该写点东西记录自己的成长。于是在&lt;code&gt;2018&lt;/code&gt;年第一季度快要过去的时候，打开了自己那个风格早就过时的&lt;code&gt;blog&lt;/code&gt;准备重构。先简单介绍一下迁移前后的框架:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;jekyll: 一个基于&lt;code&gt;ruby&lt;/code&gt;的博客框架，不会在本地渲染静态页面，需要将整个页面上传至&lt;code&gt;github.io&lt;/code&gt;，由&lt;code&gt;github.io&lt;/code&gt;去渲染。&lt;br&gt;Hexo: 由&lt;code&gt;node.js&lt;/code&gt;构建的博客框架，会在本地渲染静态页面，再上传到&lt;code&gt;github.io&lt;/code&gt;上。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="other" scheme="http://yoursite.com/categories/other/"/>
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>React-Native使用中出现的问题</title>
    <link href="http://yoursite.com/2017/11/18/React-Native%E4%BD%BF%E7%94%A8%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/11/18/React-Native使用中出现的问题/</id>
    <published>2017-11-18T12:39:40.000Z</published>
    <updated>2019-09-11T03:04:06.105Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前项目的老代码有一部分是用RN写的,在迭代一个需求的时候出现了bug,因此必须与RN刚正面了。以前完全没有接触过RN、JS的实际开发,走了很多弯路算上看文档的时间差不多三天左右找出bug,4天的时间完成bug的修正(虽然还不是很完美)</p></blockquote><h2 id="1-Could-not-connected-to-development-server"><a href="#1-Could-not-connected-to-development-server" class="headerlink" title="1.Could not connected to development server."></a>1.Could not connected to development server.</h2><p><img src="https://mytest1oss.oss-cn-beijing.aliyuncs.com/RN_New/q1.png?Expires=1568173588&amp;OSSAccessKeyId=TMP.hWnnuiEdPEnEDTFYGRbuDMUVaStTXNp9Ryq6rYamyvRTb4eaxh1vwodGTrhgLGVQBmF9SNcYUEJ1W943WcL4SnxyCutvia2s88EbhX1YrWdqn7NYS9bQyA71pyEwSV.tmp&amp;Signature=GeZlqeu3%2FRNDxEglTq2tnTdqHEc%3D" alt="5E09428F-524A-4A89-99CB-0AFD43C76D78.png"></p><p><strong>问题分析</strong>:<br>这是一个纯新手才会犯的错误,问题的原因在于没有将本地的<code>node sever</code>启动。</p><p><strong>解决方案</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br><span class="line">或者 </span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-Unable-to-resolve-module-react"><a href="#2-Unable-to-resolve-module-react" class="headerlink" title="2.Unable to resolve module react."></a>2.Unable to resolve module react.</h2><p><img src="https://mytest1oss.oss-cn-beijing.aliyuncs.com/RN_New/q2.png?Expires=1568173606&amp;OSSAccessKeyId=TMP.hWnnuiEdPEnEDTFYGRbuDMUVaStTXNp9Ryq6rYamyvRTb4eaxh1vwodGTrhgLGVQBmF9SNcYUEJ1W943WcL4SnxyCutvia2s88EbhX1YrWdqn7NYS9bQyA71pyEwSV.tmp&amp;Signature=3DLMTB9eJTkMN%2BSsf4Smn8MbNrI%3D" alt="8356D3FC-EC22-4ABC-A106-379C27FD08EC.png"></p><p><strong>问题分析</strong>:<br>此类问题产生的原因大部分是由于<code>react</code>和<code>react-native</code>版本不匹配导致的,现在的<code>react</code>和<code>react-native</code>需要精确的版本匹配才能正常运作。</p><p><strong>解决方案</strong>:<br>安装<code>react-native</code>对应的<code>react</code>版本,若是不知道应该安装哪个版本的<code>react</code>,可以使用<code>react-native init appName --version react-native@版本号</code>新建一个对应<code>react-native</code>版本的程序,查看<code>Package.json</code>中的配置得到<code>react</code>相应的版本号。</p><h2 id="3-Undefined-is-not-an-object"><a href="#3-Undefined-is-not-an-object" class="headerlink" title="3.Undefined is not an object."></a>3.Undefined is not an object.</h2><p><img src="https://mytest1oss.oss-cn-beijing.aliyuncs.com/RN_New/q3.png?Expires=1568173621&amp;OSSAccessKeyId=TMP.hWnnuiEdPEnEDTFYGRbuDMUVaStTXNp9Ryq6rYamyvRTb4eaxh1vwodGTrhgLGVQBmF9SNcYUEJ1W943WcL4SnxyCutvia2s88EbhX1YrWdqn7NYS9bQyA71pyEwSV.tmp&amp;Signature=OeHX%2FlpUCtYgOhhoLesn2rTZ14k%3D" alt="316ECF93-37C3-4529-A691-E0BBF77AA663.png"></p><p><strong>问题分析</strong>:<br>对应的属性并不是一个对象,可能是因为版本的缘故属性的定义发生变化出现了版本不兼容的现象。</p><p><strong>解决方案</strong>:<br>跳转到第一个报错中去查看对应所属框架,查看框架版本与<code>React-native</code>版本兼容状况,将所属库调整至当前<code>React-native</code>对应版本。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前项目的老代码有一部分是用RN写的,在迭代一个需求的时候出现了bug,因此必须与RN刚正面了。以前完全没有接触过RN、JS的实际开发,走了很多弯路算上看文档的时间差不多三天左右找出bug,4天的时间完成bug的修正(虽然还不是很完美)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-Could-not-connected-to-development-server&quot;&gt;&lt;a href=&quot;#1-Could-not-connected-to-development-server&quot; class=&quot;headerlink&quot; title=&quot;1.Could not connected to development server.&quot;&gt;&lt;/a&gt;1.Could not connected to development server.&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://mytest1oss.oss-cn-beijing.aliyuncs.com/RN_New/q1.png?Expires=1568173588&amp;amp;OSSAccessKeyId=TMP.hWnnuiEdPEnEDTFYGRbuDMUVaStTXNp9Ryq6rYamyvRTb4eaxh1vwodGTrhgLGVQBmF9SNcYUEJ1W943WcL4SnxyCutvia2s88EbhX1YrWdqn7NYS9bQyA71pyEwSV.tmp&amp;amp;Signature=GeZlqeu3%2FRNDxEglTq2tnTdqHEc%3D&quot; alt=&quot;5E09428F-524A-4A89-99CB-0AFD43C76D78.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题分析&lt;/strong&gt;:&lt;br&gt;这是一个纯新手才会犯的错误,问题的原因在于没有将本地的&lt;code&gt;node sever&lt;/code&gt;启动。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案&lt;/strong&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;或者 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yarn start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="mobile development" scheme="http://yoursite.com/categories/mobile-development/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Swift中可选绑定引发的值类型与引用类型的思考</title>
    <link href="http://yoursite.com/2017/09/11/Swift%E4%B8%AD%E5%8F%AF%E9%80%89%E7%BB%91%E5%AE%9A%E5%BC%95%E5%8F%91%E7%9A%84%E5%80%BC%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/2017/09/11/Swift中可选绑定引发的值类型与引用类型的思考/</id>
    <published>2017-09-11T09:39:35.000Z</published>
    <updated>2019-09-11T03:04:15.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>   <code>Swift</code>相较于<code>OC</code>是一门类型更加安全的语言,其中引入的<code>Optional</code>类型便是为了增强取值可靠性的一种方式。然而在新旧语言的转换过程中总是会踩到坑中,由于自己对于这个概念的理解还没有到位，在最近一次的实践中就遇到了由于<code>Optional Binding</code>引发的问题。</p><h1 id="二、问题场景"><a href="#二、问题场景" class="headerlink" title="二、问题场景"></a>二、问题场景</h1><p>   <code>textFiled</code>中的<code>text</code>属性是一个可选(<code>optional</code>)类型,在对输入状态进行处理的时候肯定会涉及到对输入内容的逻辑操作。在<code>OC</code>中这种操作还是很直接的,直接使用<code>.</code>语法(<code>textField.text</code>)获取属性进行判断。<br>    但在<code>swift</code>中<code>text</code>是一个可选属性,直接对属性进行操作就比较冗余了。因此我们往往会写出如下的代码。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">var</span> text = textField.text &#123;</span><br><span class="line">  <span class="comment">/// 逻辑操作</span></span><br><span class="line">&#125;</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">这是swift中推荐的可选绑定的写法,在其中的逻辑操作中`text`就是`textField.text`解包出的值,因此可以通过判断`text`的状态,获知`textField.text`的状态。</span><br><span class="line"></span><br><span class="line">那么问题来了,当我们判断完成需要对`textField.text`进行赋值的时候,一不小心就有可能直接写出这样的代码。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```swift</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">var</span> text = textField.text 【</span><br><span class="line"><span class="comment">/// 逻辑操作</span></span><br><span class="line">text = <span class="string">"XXXXXXX"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(textField.text!)</span><br></pre></td></tr></table></figure><p>打印<code>textField.text</code>就会发现并不是<code>text</code>赋值的值。<br><a id="more"></a></p><h1 id="三、问题分析"><a href="#三、问题分析" class="headerlink" title="三、问题分析"></a>三、问题分析</h1><p>一开始遇到问题我以为我是对<code>Optional Binding</code>的理解有一些问题,查看了苹果的官方文档</p><blockquote><p>You use optional binding to find out whether an optional contains a value, and if so, to make that value available as a temporary constant or variable. </p></blockquote><blockquote><p>使用可选绑定去确认一个可选类型是存在值的,进而可以将这个值作为一个临时的常量或者变量。</p></blockquote><p>文档上这个<code>temporary</code>让我以为是作用域的问题,然而情况并不是这样。我专门声明了一个<code>textField?</code>类型的变量。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testTextField: <span class="type">UITextField?</span></span><br></pre></td></tr></table></figure><p>接着创建一个<code>textfield</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> textField = <span class="type">UITextField</span>(frame: <span class="type">CGRect</span>(x: <span class="number">100</span>, y: <span class="number">100</span>, width: <span class="number">100</span>, height: <span class="number">50</span>))</span><br><span class="line">textField.text = <span class="string">"测试数据"</span></span><br><span class="line">testTextField = textField</span><br></pre></td></tr></table></figure><p>通过可选绑定获取解包之后的<code>testTextField</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> testTextField = testTextField &#123;</span><br><span class="line">testTextField.text = <span class="string">"测试数据1"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(testTextField!.text!)</span><br></pre></td></tr></table></figure><p>此处的打印结果应该是什么呢？–<code>测试数据1</code>。<br>结果表明我们对可选绑定后的变量赋值是成功的,那么问题又来了为何之前<code>text</code>赋值不成功呢？</p><p>既然有成功的案例自然就证明了这个锅并不该由<code>Optional Binding</code>来背。</p><p>所以问题到底是出在哪里呢？<br>仔细看两次可选绑定的类型,一个使用了<code>let</code>一个使用了<code>var</code>,是因为这个原因么？明显不是,两次可选绑定的对象类型一个是<code>UITextField？</code>,另一个是<code>String?</code>看出问题了么？</p><ul><li><code>UITextField</code>是引用类型,可选绑定的结果是指针,指向的内存是同一块内存地址。</li><li><code>String</code>是值类型,可选绑定的是具体的值,相当于<strong>新建</strong>了一个变量赋的值和<code>textField.text</code>一样而已。</li></ul><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p><code>Swift</code>的设计理念就是尽可能抛弃一些历史上存在的包袱,是一门更加高级和现代化的语言。而<code>OC</code>身上就明显刻印着<code>C</code>的烙印,像<code>NSString *</code>和<code>UITextField *</code>,其中<code>*</code>号就能让开发者一目了然这是一个引用类型,<code>Swift</code>中的引用类型和值类型并没有符号来区分,因此在使用的过程中一定要更加谨慎才行。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;   &lt;code&gt;Swift&lt;/code&gt;相较于&lt;code&gt;OC&lt;/code&gt;是一门类型更加安全的语言,其中引入的&lt;code&gt;Optional&lt;/code&gt;类型便是为了增强取值可靠性的一种方式。然而在新旧语言的转换过程中总是会踩到坑中,由于自己对于这个概念的理解还没有到位，在最近一次的实践中就遇到了由于&lt;code&gt;Optional Binding&lt;/code&gt;引发的问题。&lt;/p&gt;
&lt;h1 id=&quot;二、问题场景&quot;&gt;&lt;a href=&quot;#二、问题场景&quot; class=&quot;headerlink&quot; title=&quot;二、问题场景&quot;&gt;&lt;/a&gt;二、问题场景&lt;/h1&gt;&lt;p&gt;   &lt;code&gt;textFiled&lt;/code&gt;中的&lt;code&gt;text&lt;/code&gt;属性是一个可选(&lt;code&gt;optional&lt;/code&gt;)类型,在对输入状态进行处理的时候肯定会涉及到对输入内容的逻辑操作。在&lt;code&gt;OC&lt;/code&gt;中这种操作还是很直接的,直接使用&lt;code&gt;.&lt;/code&gt;语法(&lt;code&gt;textField.text&lt;/code&gt;)获取属性进行判断。&lt;br&gt;    但在&lt;code&gt;swift&lt;/code&gt;中&lt;code&gt;text&lt;/code&gt;是一个可选属性,直接对属性进行操作就比较冗余了。因此我们往往会写出如下的代码。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; text = textField.text &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/// 逻辑操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这是swift中推荐的可选绑定的写法,在其中的逻辑操作中`text`就是`textField.text`解包出的值,因此可以通过判断`text`的状态,获知`textField.text`的状态。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;那么问题来了,当我们判断完成需要对`textField.text`进行赋值的时候,一不小心就有可能直接写出这样的代码。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```swift&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; text = textField.text 【&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/// 逻辑操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	text = &lt;span class=&quot;string&quot;&gt;&quot;XXXXXXX&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(textField.text!)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;打印&lt;code&gt;textField.text&lt;/code&gt;就会发现并不是&lt;code&gt;text&lt;/code&gt;赋值的值。&lt;br&gt;
    
    </summary>
    
      <category term="mobile development" scheme="http://yoursite.com/categories/mobile-development/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>R.swift优雅的引入项目中的资源文件</title>
    <link href="http://yoursite.com/2017/07/10/R.swift%E4%BC%98%E9%9B%85%E7%9A%84%E5%BC%95%E5%85%A5%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/07/10/R.swift优雅的引入项目中的资源文件/</id>
    <published>2017-07-10T01:39:35.000Z</published>
    <updated>2019-09-11T03:04:10.904Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>R.swift是一个高效引入iOS资源的框架,避免了使用字符串引入资源文件导致程序崩溃的尴尬。<br>目前R.swift支持到Swift3.0版本</p></blockquote><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>使用代码的方式来引入资源:</p><ul><li><strong>类型完整</strong>: 减少推断和转换方法返回值的类型</li><li><strong>编译时检查</strong>: 不会再因为不正确的字符串导致App产生运行时崩溃</li><li><strong>自动补全</strong>: 不再需要输入图片名称</li></ul><p>示例：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">之前: </span><br><span class="line"><span class="keyword">let</span> image = <span class="type">UIImage</span>(named: <span class="string">"imageName"</span>)</span><br><span class="line"></span><br><span class="line"><span class="type">R</span>.swift: </span><br><span class="line"><span class="keyword">let</span> image = <span class="type">R</span>.image.imageName()</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>使用<code>R.swift</code>之后,可以使用<code>R</code>结构体来获取资源文件。如若资源文件发生改变,<code>R.swift</code>会正确的清除\改变\增加资源。</p><p><code>R.swift</code>目前支持如下几种资源:</p><ul><li><strong>Images</strong></li><li><strong>Fonts</strong></li><li><strong>Resource files</strong></li><li><strong>Colors</strong></li><li><strong>Localized String</strong></li><li><strong>StoryBoard</strong></li><li><strong>Segues</strong></li><li><strong>Nibs</strong></li><li><strong>Reuseable cells</strong></li></ul><h2 id="接入方式"><a href="#接入方式" class="headerlink" title="接入方式"></a>接入方式</h2><h3 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h3><ol><li>添加<code>pod R.swift</code>至<code>Podfile</code>文件中之后终端执行<code>pod install</code></li><li><code>Xcode</code>配置:在当前项目的<code>targets</code>中选择<code>Build phrase</code>,点击<code>+</code>号选择添加<code>New Run Script Phase</code>,</li><li>将<code>Run Script</code>移动至<code>Compile sources</code>之上,<code>Check Pods Manifest.lock</code>之下。在<code>Run Script</code>中添加:<code>&quot;$PODS_ROOT/R.swift/rswift&quot; &quot;$SRCROOT&quot;</code>,</li><li>编译你的项目,在<code>Finder</code>中你会看到<code>R.generated.swift</code>在<code>Pod</code>文件中,将该文件拖动至项目中,切记千万<strong>不要</strong>勾选<code>Copy items if needed</code>,</li><li>新增\删除\修改资源文件之后都需要重新<code>command+B</code>编译项目,保证正确引用。</li></ol><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="1、Images"><a href="#1、Images" class="headerlink" title="1、Images"></a>1、Images</h3><p><strong>之前</strong>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> png = <span class="type">UIImage</span>(named: <span class="string">"png"</span>)</span><br><span class="line"><span class="keyword">let</span> jpg = <span class="type">UIImage</span>(named: <span class="string">"jpg.jpg"</span>)</span><br></pre></td></tr></table></figure><p><strong>R.swift</strong>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> png = <span class="type">R</span>.image.png()</span><br><span class="line"><span class="keyword">let</span> jpg = <span class="type">R</span>.imgae.jpgJpg()</span><br></pre></td></tr></table></figure><h3 id="2、Custom-fonts"><a href="#2、Custom-fonts" class="headerlink" title="2、Custom fonts"></a>2、Custom fonts</h3><p><strong>之前</strong>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> customFont = <span class="type">UIFont</span>(name: <span class="string">"Acme-Light"</span>, size: <span class="number">22</span>)</span><br></pre></td></tr></table></figure><p><strong>R.swift</strong>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> customFont = <span class="type">R</span>.font.acmeLight(size: <span class="number">22</span>)</span><br></pre></td></tr></table></figure><h3 id="3、Resource-files"><a href="#3、Resource-files" class="headerlink" title="3、Resource files"></a>3、Resource files</h3><p><strong>之前</strong> :</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonURL = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"seed-data"</span>, withExtension: <span class="string">"json"</span>)</span><br><span class="line"><span class="keyword">let</span> jsonPath = <span class="type">Bundle</span>.main.path(forResource: <span class="string">"seed-data"</span>, ofType: <span class="string">"json"</span>)</span><br></pre></td></tr></table></figure><p><strong>R.swift</strong>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonURL = <span class="type">R</span>.file.seedDataJson()</span><br><span class="line"><span class="keyword">let</span> jsonPath = <span class="type">R</span>.file.seedDataJson.path()</span><br></pre></td></tr></table></figure><h3 id="4、Localized-Strings"><a href="#4、Localized-Strings" class="headerlink" title="4、Localized Strings"></a>4、Localized Strings</h3><p><strong>之前</strong>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> welcomeMessage = <span class="type">NSLocalizedString</span>(<span class="string">"welcome.message"</span>, comment: <span class="string">""</span>)</span><br><span class="line"><span class="keyword">let</span> settingsTitle = <span class="type">NSLocalizedString</span>(<span class="string">"title"</span>, tableName: <span class="string">"Settings"</span>, comment: <span class="string">""</span>)</span><br><span class="line"><span class="keyword">let</span> welcomeName = <span class="type">String</span>(format: <span class="type">NSLocalizedString</span>(<span class="string">"welcome.withName"</span>, comment: <span class="string">""</span>), locale: <span class="type">NSLocale</span>.current, <span class="string">"Alice"</span>)</span><br><span class="line"><span class="keyword">let</span> progress = <span class="type">String</span>(format: <span class="type">NSLocalizedString</span>(<span class="string">"copy.progress"</span>, comment: <span class="string">""</span>), locale: <span class="type">NSLocale</span>.current, <span class="number">4</span>, <span class="number">23</span>)</span><br></pre></td></tr></table></figure><p><strong>R.swift</strong>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> welcomeMessage = <span class="type">R</span>.string.localizable.welcomeMessage()</span><br><span class="line"><span class="keyword">let</span> settingsTitle = <span class="type">R</span>.string.settings.title()</span><br><span class="line"><span class="keyword">let</span> welcomeName = <span class="type">R</span>.string.localizable.welcomeWithName(<span class="string">"Alice"</span>)</span><br><span class="line"><span class="keyword">let</span> progress = <span class="type">R</span>.string.localizable.copyProgress(completed: <span class="number">4</span>, total: <span class="number">23</span>)</span><br></pre></td></tr></table></figure><h3 id="5、Segues"><a href="#5、Segues" class="headerlink" title="5、Segues"></a>5、Segues</h3><p><strong>之前</strong>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">performSegue(withIdentifier: <span class="string">"openSettings"</span>, sender: <span class="keyword">self</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepare</span><span class="params">(<span class="keyword">for</span> segue: UIStoryboardSegue, sender: <span class="keyword">Any</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> settingsController = segue.destination <span class="keyword">as</span>? <span class="type">SettingsController</span>,</span><br><span class="line">       <span class="keyword">let</span> segue = segue <span class="keyword">as</span>? <span class="type">CustomSettingsSegue</span>, segue.identifier == <span class="string">"openSettings"</span> &#123;</span><br><span class="line">      segue.animationType = .<span class="type">LockAnimation</span></span><br><span class="line">      settingsController.lockSettings = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>R.swift</strong>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">performSegue(withIdentifier: <span class="type">R</span>.segue.overviewController.openSettings, sender: <span class="keyword">self</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepare</span><span class="params">(<span class="keyword">for</span> segue: UIStoryboardSegue, sender: <span class="keyword">Any</span>?)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> typedInfo = <span class="type">R</span>.segue.overviewController.openSettings(segue: segue) &#123;</span><br><span class="line">    typedInfo.segue.animationType = .<span class="type">LockAnimation</span></span><br><span class="line">    typedInfo.destinationViewController.lockSettings = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="6、Nibs"><a href="#6、Nibs" class="headerlink" title="6、Nibs"></a>6、Nibs</h3><p><strong>之前</strong>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nameOfNib = <span class="string">"CustomView"</span></span><br><span class="line"><span class="keyword">let</span> customViewNib = <span class="type">UINib</span>(nibName: <span class="string">"CustomView"</span>, bundle: <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">let</span> rootViews = customViewNib.instantiate(withOwner: <span class="literal">nil</span>, options: <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">let</span> customView = rootViews[<span class="number">0</span>] <span class="keyword">as</span>? <span class="type">CustomView</span></span><br><span class="line"><span class="keyword">let</span> viewControllerWithNib = <span class="type">CustomViewController</span>(nibName: <span class="string">"CustomView"</span>, bundle: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p><strong>R.swift</strong>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nameOfNib = <span class="type">R</span>.nib.customView.name</span><br><span class="line"><span class="keyword">let</span> customViewNib = <span class="type">R</span>.nib.customView()</span><br><span class="line"><span class="keyword">let</span> rootViews = <span class="type">R</span>.nib.customView.instantiate(withOwner: <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">let</span> customView = <span class="type">R</span>.nib.customView.firstView(owner: <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> viewControllerWithNib = <span class="type">CustomViewController</span>(nib: <span class="type">R</span>.nib.customView)</span><br></pre></td></tr></table></figure><h3 id="7、Reusable-table-view-cells"><a href="#7、Reusable-table-view-cells" class="headerlink" title="7、Reusable table view cells"></a>7、Reusable table view cells</h3><h4 id="UITableView"><a href="#UITableView" class="headerlink" title="UITableView"></a>UITableView</h4><p><strong>之前:</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FaqAnswerController</span>: <span class="title">UITableViewController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    <span class="keyword">let</span> textCellNib = <span class="type">UINib</span>(nibName: <span class="string">"TextCell"</span>, bundle: <span class="literal">nil</span>)</span><br><span class="line">    tableView.register(textCellNib, forCellReuseIdentifier: <span class="string">"TextCellIdentifier"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> textCell = tableView.dequeueReusableCell(withIdentifier: <span class="string">"TextCellIdentifier"</span>, <span class="keyword">for</span>: indexPath) <span class="keyword">as</span>! <span class="type">TextCell</span></span><br><span class="line">    textCell.mainLabel.text = <span class="string">"Hello World"</span></span><br><span class="line">    <span class="keyword">return</span> textCell</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">**<span class="type">R</span>.swift**:</span><br><span class="line"></span><br><span class="line">```swift</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FaqAnswerController</span>: <span class="title">UITableViewController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    tableView.register(<span class="type">R</span>.nib.textCell)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> textCell = tableView.dequeueReusableCell(withIdentifier: <span class="type">R</span>.nib.textCell.identifier, <span class="keyword">for</span>: indexPath)!</span><br><span class="line">    textCell.mainLabel.text = <span class="string">"Hello World"</span></span><br><span class="line">    <span class="keyword">return</span> textCell</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="UICollectionView"><a href="#UICollectionView" class="headerlink" title="UICollectionView"></a>UICollectionView</h4><p><strong>之前</strong>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecentsController</span>: <span class="title">UICollectionViewController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    <span class="keyword">let</span> talkCellNib = <span class="type">UINib</span>(nibName: <span class="string">"TalkCell"</span>, bundle: <span class="literal">nil</span>)</span><br><span class="line">    collectionView?.register(talkCellNib, forCellWithReuseIdentifier: <span class="string">"TalkCellIdentifier"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: UICollectionView, cellForItemAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UICollectionViewCell</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> cell = collectionView.dequeueReusableCell(withReuseIdentifier: <span class="string">"TalkCellIdentifier"</span>, <span class="keyword">for</span>: indexPath) <span class="keyword">as</span>! <span class="type">TalkCell</span></span><br><span class="line">    cell.configureCell(<span class="string">"Item \(indexPath.item)"</span>)</span><br><span class="line">    <span class="keyword">return</span> cell</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>R.swift</strong>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecentsController</span>: <span class="title">UICollectionViewController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    collectionView?.register(<span class="type">R</span>.nib.talkCell)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: UICollectionView, cellForItemAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UICollectionViewCell</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> cell = collectionView.dequeueReusableCell(withReuseIdentifier: <span class="type">R</span>.reuseIdentifier.talkCell, <span class="keyword">for</span>: indexPath)! <span class="comment">// 此处跟tableView的使用方式还是有很大区别</span></span><br><span class="line">    cell.configureCell(<span class="string">"Item \(indexPath.item)"</span>)</span><br><span class="line">    <span class="keyword">return</span> cell</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="R.swift项目链接">https://github.com/mac-cain13/R.swift</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;R.swift是一个高效引入iOS资源的框架,避免了使用字符串引入资源文件导致程序崩溃的尴尬。&lt;br&gt;目前R.swift支持到Swift3.0版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;优势&quot;&gt;&lt;a href=&quot;#优势&quot; class=&quot;headerlink&quot; title=&quot;优势&quot;&gt;&lt;/a&gt;优势&lt;/h2&gt;&lt;p&gt;使用代码的方式来引入资源:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;类型完整&lt;/strong&gt;: 减少推断和转换方法返回值的类型&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编译时检查&lt;/strong&gt;: 不会再因为不正确的字符串导致App产生运行时崩溃&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动补全&lt;/strong&gt;: 不再需要输入图片名称&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;之前: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; image = &lt;span class=&quot;type&quot;&gt;UIImage&lt;/span&gt;(named: &lt;span class=&quot;string&quot;&gt;&quot;imageName&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;.swift: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; image = &lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;.image.imageName()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="mobile development" scheme="http://yoursite.com/categories/mobile-development/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>在项目中使用RSA算法</title>
    <link href="http://yoursite.com/2016/11/05/%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8RSA%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2016/11/05/在项目中使用RSA算法/</id>
    <published>2016-11-04T23:39:35.000Z</published>
    <updated>2019-09-11T02:53:09.464Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://mytest1oss.oss-cn-beijing.aliyuncs.com/rsa/rsa.jpeg?Expires=1568173914&amp;OSSAccessKeyId=TMP.hWnnuiEdPEnEDTFYGRbuDMUVaStTXNp9Ryq6rYamyvRTb4eaxh1vwodGTrhgLGVQBmF9SNcYUEJ1W943WcL4SnxyCutvia2s88EbhX1YrWdqn7NYS9bQyA71pyEwSV.tmp&amp;Signature=IyeH98rtaH1vfre7adbRlawvrE8%3D" alt="封面图"></p><blockquote><p>在正文开始之前先吐个槽，看自己上一篇发文已经是好几个月之前的了。之前的设想是每周输出一篇技术方面的文档，接着就被硬生生拖成了一个月，然后就不知道几个月去了……其间还是有有不少可以写的题材，都是因为这该死的拖延~~~好了进入正题。</p></blockquote><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>契机是公司换了一套新接口，要求进行全报文加密。以前公司项目基本上都使用的对称加密的模式<code>3DES</code>、<code>AES</code>，由于对称加密的密钥只有一对，有很大的密钥泄露风险。身处金融这个极为敏感的行业，对安全的要求也是极高。趁着这个机会，把项目中的加密模式统一替换成<code>RSA</code>非对称加密。</p><h1 id="2-关于加密算法"><a href="#2-关于加密算法" class="headerlink" title="2.关于加密算法"></a>2.关于加密算法</h1><p>本篇不会对<code>RSA</code>加密算法原理进行详细的解释。在互联网异常发达的今天，<code>RSA</code>算法详细的资料很容易就能获取到。安全领域也是一个能够深挖的领域，本篇文章偏向工程向，仅对一些基本基本概念进行简单的解释。</p><ul><li><p><strong>对称加密和非对称加密</strong><br><strong>对称加密</strong> ：加密和解密用的是同一套密钥，缺陷是密钥管理存在风险。常用的加密方式有：<code>DES</code>、<code>3DES</code>、<code>AES</code>等。<br><strong>非对称加密</strong> ：加密和解密用的不同的密钥，公钥加密私钥解密。常用的加密方式有<code>RSA</code>。</p></li><li><p><strong>RSA常见用法</strong>：<br> 1.公钥加密，私钥解密；<br> 2.私钥签名;<br> 3.公钥验签。</p><a id="more"></a></li></ul><h1 id="3-实践"><a href="#3-实践" class="headerlink" title="3.实践"></a>3.实践</h1><h2 id="1、生成密钥："><a href="#1、生成密钥：" class="headerlink" title="1、生成密钥："></a>1、生成密钥：</h2><p>使用终端openssl命令生成密钥</p><h3 id="1-生成私钥-密钥长度为2048bit，base64编码。"><a href="#1-生成私钥-密钥长度为2048bit，base64编码。" class="headerlink" title="1).生成私钥,密钥长度为2048bit，base64编码。"></a>1).生成私钥,密钥长度为2048bit，base64编码。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out rsa_private_key.pem 2048</span><br></pre></td></tr></table></figure><p>关于密钥长度，这里要进行一下特别说明。每次加密的数据不能超出密钥的长度，2048bit长度的密钥，只能单次只能加密(2048 / 8 - 11) = 245byte长度的数据。(那11byte是RSA预留的长度)。若待加密的数据长度超过了245byte，就需要对数据进行分段加密。</p><h3 id="2-根据之前生成的私钥生成公钥"><a href="#2-根据之前生成的私钥生成公钥" class="headerlink" title="2).根据之前生成的私钥生成公钥:"></a>2).根据之前生成的私钥生成公钥:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -in rsa_private_key.pem -out rsa_public_key.pem -pubout</span><br></pre></td></tr></table></figure><h3 id="3-转换公钥为PKCS8格式，这种格式可以直接在iOS项目中使用"><a href="#3-转换公钥为PKCS8格式，这种格式可以直接在iOS项目中使用" class="headerlink" title="3).转换公钥为PKCS8格式，这种格式可以直接在iOS项目中使用:"></a>3).转换公钥为<code>PKCS8</code>格式，这种格式可以直接在iOS项目中使用:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs8 -topk8 -in rsa_private_key.pem -out pkcs8_rsa_private_key.pem -nocrypt</span><br></pre></td></tr></table></figure><p>我司的情况是由公司后台生成私钥和公钥，提供<code>.pem</code>格式的公钥给移动端，因此我直接使用的是pkcs8格式的公钥。</p><p><strong>注意</strong>：不建议将私钥保存在客户端，私钥泄露后果会很严重！</p><h2 id="2、在项目中使用"><a href="#2、在项目中使用" class="headerlink" title="2、在项目中使用:"></a>2、在项目中使用:</h2><p>Demo地址:<a href>https://github.com/Hstripe/RHRSAUtil</a></p><p>以上是我使用的<code>RSA</code>工具类，支持<code>RSA</code>在移动端的各种日常用法：加密、解密、加签、验签。跟网上很多工具类不同的是不需要导入<code>p12</code>、<code>der</code>格式的密钥文件，支持字符串形式的密钥文件非常方便。而且使用的是<code>Apple</code>自家的<code>Security.framework</code>。网上很多例程都是使用的<code>openSSL</code>那一套加密工具类，实现也很方便就是包体积略微有点大。</p><p>若使用<code>IDE</code>是<code>Xcode8</code>及以上,请在<code>Capabilities</code>中将<code>KeyChain sharing</code>设置为<code>YES</code></p><h3 id="1-公钥加密"><a href="#1-公钥加密" class="headerlink" title="1.)公钥加密"></a>1.)公钥加密</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *string = <span class="string">@"doRSAEncrypt"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *publickey = <span class="string">@"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA61sODmFj/OXnrHUYzams\</span></span><br><span class="line"><span class="string"> c/6XLni9G0HYv9sBewaPjF6qlu845nwmYSA6dQ9zPk231o5l3tmHLpUQGNnp/5rH\</span></span><br><span class="line"><span class="string"> +84iB/tM+Y+2kTI8uILGbmby2DL3rgzBG+I9h7e3w3QktpdcD8Z+ZuEVa/CY3Xez\</span></span><br><span class="line"><span class="string"> 8X1uknEVzIIhDKY7ipAoebchVdELbTlH1BRLz8RH6mQ+Z8REH4UL0TiQLfSfTotv\</span></span><br><span class="line"><span class="string"> 1G5ZerNxVZ7Toi4K9KFDA+1UD+LeDGg8PY/sdg0AJpR4o6bfDBko50wKLDz4UYyp\</span></span><br><span class="line"><span class="string"> 7EFZv661o2Mr7+KoQ6Tpb7w8bTl7wrRKz9ugB5+tM2F7aDvv1mzr7STIF+2c7tEx\</span></span><br><span class="line"><span class="string"> DQIDAQAB"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *encryptString = [IPNRSAUtil encryptString:string publicKey:publickey];</span><br></pre></td></tr></table></figure><h3 id="2-私钥解密"><a href="#2-私钥解密" class="headerlink" title="2.)私钥解密"></a>2.)私钥解密</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *privatekey = <span class="string">@"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDrWw4OYWP85ees\</span></span><br><span class="line"><span class="string"> dRjNqaxz/pcueL0bQdi/2wF7Bo+MXqqW7zjmfCZhIDp1D3M+TbfWjmXe2YculRAY\</span></span><br><span class="line"><span class="string"> 2en/msf7ziIH+0z5j7aRMjy4gsZuZvLYMveuDMEb4j2Ht7fDdCS2l1wPxn5m4RVr\</span></span><br><span class="line"><span class="string"> 8Jjdd7PxfW6ScRXMgiEMpjuKkCh5tyFV0QttOUfUFEvPxEfqZD5nxEQfhQvROJAt\</span></span><br><span class="line"><span class="string"> 9J9Oi2/Ubll6s3FVntOiLgr0oUMD7VQP4t4MaDw9j+x2DQAmlHijpt8MGSjnTAos\</span></span><br><span class="line"><span class="string"> PPhRjKnsQVm/rrWjYyvv4qhDpOlvvDxtOXvCtErP26AHn60zYXtoO+/WbOvtJMgX\</span></span><br><span class="line"><span class="string"> 7Zzu0TENAgMBAAECggEBAOMf6w+ror9y6sE9+6K1hEwoO6NIN06vm8mCQwqDiVIw\</span></span><br><span class="line"><span class="string"> JTYlQ+cBllQSsvc24sMUYz32C48ko1Ur2u3wleXqa+Wvxp2nQWBw9QFn1rtE0NPI\</span></span><br><span class="line"><span class="string"> G8DSZr0bZ9xN1406mWdQlQF0Tg6XQnJr8q1I8WyAUTHSFzvRT/Uc+2Hmpf0RI05Y\</span></span><br><span class="line"><span class="string"> t0dt5bsGn/g+ijGbCm63Z2U8u5yWXidxWfU/KyYf1Y3mw9lGLR6IJc/q9N+TO4ih\</span></span><br><span class="line"><span class="string"> JM5pCraMFI4zWblGobkN2WKy7MrQ45FLSKul4W00+VyM/rVivW/fYUaqFEnlBog3\</span></span><br><span class="line"><span class="string"> /4hgI6Bsw2IuSk2Ubhbc4fp//146vJf6oL4WAJHmAiECgYEA+e3AFph8joC5gC1Q\</span></span><br><span class="line"><span class="string"> ok97tLJqt95fZCx4VCw6lPPbWxOHG6TJlvlo7kZIeUfKrGIlOWn38yuw5thEZKwW\</span></span><br><span class="line"><span class="string"> bzE8kn5WGlUgkOQ7hJ6Iiw/TzCFPRHxV63WBKa8OnyFIn3w91zI8ZTcUgrgyns+F\</span></span><br><span class="line"><span class="string"> gE5uxkEjb6iIyxxnpqC7Fk3lnikCgYEA8RKtn7kqoe0T/Yv7UsPLm7KzuWn3/01r\</span></span><br><span class="line"><span class="string"> LGA+x+GCp4rP2Lf0u1K+7VY6Dv/ceTBuA/2Yujenkjt0LaF+Bz0tLWFB5BTw3n+u\</span></span><br><span class="line"><span class="string"> 6QshVdP3O1im4w6p3e8O9mfBCSV/CX5oBkbamemyQ7DTB9VtYNNmtGTs2aySuoel\</span></span><br><span class="line"><span class="string"> zPU0czETEEUCgYAjVhwclb62nzibCM0nxbkl2TwBdy1hinAQ5pf5y2iuPdqSbAAc\</span></span><br><span class="line"><span class="string"> mnLdjY5dp2reaJn+vh7SgNDoMpeo7DPX0MxRog8mdfa+xaYsoAWKM9isOeFtO28i\</span></span><br><span class="line"><span class="string"> dWCnthqJITmVYwmTTYUAgoMh4E036vtjIrPC0B7kgJ2mqgN1qbAJ/UWD0QKBgFSO\</span></span><br><span class="line"><span class="string"> U53hacWwDUHydm2aRXFQJd/T/mtq8Tt4aqzbOWOgubRvGYUWyecfRm/6aI+NYBlA\</span></span><br><span class="line"><span class="string"> OvCeEsWk2uQib70ERTNUmLLycWXpbSVKhR/AoEgNmUOs4gH5FstwqvGVWFCxKLWC\</span></span><br><span class="line"><span class="string"> 5qvzn1ZE0FBAGQRMQgrmF3lmIXURnSMdoo8A2IntAoGAVCFmPpXvI8rMk2N3CvQ4\</span></span><br><span class="line"><span class="string"> dkDfP3W6w1KpyMzuQRZE9N1IUBYh3KN25HfzeW1OIFHPuxInMm/6zaU/rUHJSy/b\</span></span><br><span class="line"><span class="string"> ynVdQ6jvM4ZIt3rYUXZN6+a14AeA/MNNrY2LzCYlCxWIbVyNj9UN8/uda0zEtZ73\</span></span><br><span class="line"><span class="string"> RWYX1BlKVMSIx5Bf7eNH4fI="</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *decryptString = [IPNRSAUtil decryptString:encryptString privateKey:privatekey];</span><br></pre></td></tr></table></figure><h3 id="3-私钥加签"><a href="#3-私钥加签" class="headerlink" title="3.)私钥加签"></a>3.)私钥加签</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *signature = [IPNRSAUtil rsaSignString:string WithPrivateKey:privatekey];</span><br></pre></td></tr></table></figure><h3 id="4-公钥验签"><a href="#4-公钥验签" class="headerlink" title="4.)公钥验签"></a>4.)公钥验签</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">BOOL</span> result = [IPNRSAUtil rsaVerifySignature:signature plainString:string WithPublicKey:publickey];</span><br></pre></td></tr></table></figure><h3 id="5-分段加密"><a href="#5-分段加密" class="headerlink" title="5.)分段加密"></a>5.)分段加密</h3><p>若待加密的数据长度大于密钥长度，就需要对待加密的数据进行分段加密</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n为密钥单次加密长度，这里使用的是2048位的密钥，因此n的值为245(2048/8 - 11)。</span></span><br><span class="line"><span class="built_in">NSInteger</span> n = <span class="number">245</span>;</span><br><span class="line"><span class="built_in">NSMutableData</span> *preData = [[<span class="built_in">NSMutableData</span> alloc] init];</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">NSInteger</span> i=<span class="number">0</span>; i&lt;=ceilf(string.length / n); i++)&#123;</span><br><span class="line"><span class="built_in">NSString</span> *subString = [string substringWithRange:<span class="built_in">NSMakeRange</span>(i * n, MIN(n, string.length - i * <span class="number">245</span>))];</span><br><span class="line"><span class="built_in">NSData</span> *encryptData = [IPNRSAUtil encryptData:[subString dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>] publicKey:publickey];</span><br><span class="line"><span class="comment">// 分段加密需要拼接加密后的data数据，不要将data转换成字符串再拼接，这样会导致结果错误。</span></span><br><span class="line">[preData appendData:encryptData];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSData</span> *finalData = [[<span class="built_in">NSData</span> alloc] initWithData:preData];</span><br><span class="line">finalData = [finalData base64EncodedDataWithOptions:<span class="number">0</span>];</span><br><span class="line"><span class="built_in">NSString</span> *result = [[<span class="built_in">NSString</span> alloc] initWithData:finalData encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"result:%@"</span>,result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-后记"><a href="#4-后记" class="headerlink" title="4.后记"></a>4.后记</h1><p>为了搞这个工具类前前后后花了也有半个多月的时间了，看了很多文档和例程加上自己的实践调试才有了这个工具类。一开始使用的是<code>openSSL</code>那一套加密工具实现的，但是觉得<code>openSSL</code>占用的空间略大，还是用<code>Security.framework</code>来实现的。平时总是忙于业务需求的实现，忽视了客户端方面的安全，网上对客户端安全这一块的资源也比较有限，但愿我这篇文章能对后来人有所帮助吧。</p><h1 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5.参考资料"></a>5.参考资料</h1><blockquote><p>看的资料比较多就不一一列举了，主要还是通过<code>Google</code>、<code>GitHub</code>、<code>StackOverFlow</code>、<code>简书</code>、<code>知乎</code>等平台来获取相关资源的。最后，就在这里统一感谢一下相关资源的贡献者吧。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://mytest1oss.oss-cn-beijing.aliyuncs.com/rsa/rsa.jpeg?Expires=1568173914&amp;amp;OSSAccessKeyId=TMP.hWnnuiEdPEnEDTFYGRbuDMUVaStTXNp9Ryq6rYamyvRTb4eaxh1vwodGTrhgLGVQBmF9SNcYUEJ1W943WcL4SnxyCutvia2s88EbhX1YrWdqn7NYS9bQyA71pyEwSV.tmp&amp;amp;Signature=IyeH98rtaH1vfre7adbRlawvrE8%3D&quot; alt=&quot;封面图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在正文开始之前先吐个槽，看自己上一篇发文已经是好几个月之前的了。之前的设想是每周输出一篇技术方面的文档，接着就被硬生生拖成了一个月，然后就不知道几个月去了……其间还是有有不少可以写的题材，都是因为这该死的拖延~~~好了进入正题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h1&gt;&lt;p&gt;契机是公司换了一套新接口，要求进行全报文加密。以前公司项目基本上都使用的对称加密的模式&lt;code&gt;3DES&lt;/code&gt;、&lt;code&gt;AES&lt;/code&gt;，由于对称加密的密钥只有一对，有很大的密钥泄露风险。身处金融这个极为敏感的行业，对安全的要求也是极高。趁着这个机会，把项目中的加密模式统一替换成&lt;code&gt;RSA&lt;/code&gt;非对称加密。&lt;/p&gt;
&lt;h1 id=&quot;2-关于加密算法&quot;&gt;&lt;a href=&quot;#2-关于加密算法&quot; class=&quot;headerlink&quot; title=&quot;2.关于加密算法&quot;&gt;&lt;/a&gt;2.关于加密算法&lt;/h1&gt;&lt;p&gt;本篇不会对&lt;code&gt;RSA&lt;/code&gt;加密算法原理进行详细的解释。在互联网异常发达的今天，&lt;code&gt;RSA&lt;/code&gt;算法详细的资料很容易就能获取到。安全领域也是一个能够深挖的领域，本篇文章偏向工程向，仅对一些基本基本概念进行简单的解释。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;对称加密和非对称加密&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;对称加密&lt;/strong&gt; ：加密和解密用的是同一套密钥，缺陷是密钥管理存在风险。常用的加密方式有：&lt;code&gt;DES&lt;/code&gt;、&lt;code&gt;3DES&lt;/code&gt;、&lt;code&gt;AES&lt;/code&gt;等。&lt;br&gt;&lt;strong&gt;非对称加密&lt;/strong&gt; ：加密和解密用的不同的密钥，公钥加密私钥解密。常用的加密方式有&lt;code&gt;RSA&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;RSA常见用法&lt;/strong&gt;：&lt;br&gt; 1.公钥加密，私钥解密；&lt;br&gt; 2.私钥签名;&lt;br&gt; 3.公钥验签。&lt;/p&gt;
    
    </summary>
    
      <category term="mobile development" scheme="http://yoursite.com/categories/mobile-development/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>静态库联调中的若干问题</title>
    <link href="http://yoursite.com/2016/08/12/%E9%9D%99%E6%80%81%E5%BA%93%E8%81%94%E8%B0%83%E4%B8%AD%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/08/12/静态库联调中的若干问题/</id>
    <published>2016-08-12T02:39:35.000Z</published>
    <updated>2019-09-11T03:25:51.211Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://mytest1oss.oss-cn-beijing.aliyuncs.com/static_lib/s1.png?Expires=1568175259&amp;OSSAccessKeyId=TMP.hWnnuiEdPEnEDTFYGRbuDMUVaStTXNp9Ryq6rYamyvRTb4eaxh1vwodGTrhgLGVQBmF9SNcYUEJ1W943WcL4SnxyCutvia2s88EbhX1YrWdqn7NYS9bQyA71pyEwSV.tmp&amp;Signature=OiSl8baGWVphfkvU0py2zfaJvg0%3D" alt="毫无意义的封面图"></p><h1 id="一-概述"><a href="#一-概述" class="headerlink" title="一.概述"></a>一.概述</h1><p>日常开发中，静态库的开发总是要花费开发者很大的精力。工作中我们一般都是在项目中进行代码编写，在需要的时候把代码提出来另行打包，若有需求修改或者调试时，总需要把代码或者库拿回原程序中进行测试修改。<br>由于工作需要我要经常修改静态库代码中的内容，恰好最近在静态库联调的时候出现了一些问题，记录下来以后避免踩到这些坑。<br><a id="more"></a></p><h1 id="二、操作步骤"><a href="#二、操作步骤" class="headerlink" title="二、操作步骤"></a>二、操作步骤</h1><h2 id="1-创建工程"><a href="#1-创建工程" class="headerlink" title="1.创建工程"></a>1.创建工程</h2><p>用Xcode创建一个project，在<code>project</code>-<code>TARGETS</code>中创建一个.a静态库文件：<br><img src="https://mytest1oss.oss-cn-beijing.aliyuncs.com/static_lib/s2.png?Expires=1568175274&amp;OSSAccessKeyId=TMP.hWnnuiEdPEnEDTFYGRbuDMUVaStTXNp9Ryq6rYamyvRTb4eaxh1vwodGTrhgLGVQBmF9SNcYUEJ1W943WcL4SnxyCutvia2s88EbhX1YrWdqn7NYS9bQyA71pyEwSV.tmp&amp;Signature=9ImJQry%2FVyn%2B9JD6wmi0DMsPqcA%3D" alt="在project中创建静态库文件"><br>创建好的静态库文件会出现在这里<br><img src="https://mytest1oss.oss-cn-beijing.aliyuncs.com/static_lib/s3.png?Expires=1568175307&amp;OSSAccessKeyId=TMP.hWnnuiEdPEnEDTFYGRbuDMUVaStTXNp9Ryq6rYamyvRTb4eaxh1vwodGTrhgLGVQBmF9SNcYUEJ1W943WcL4SnxyCutvia2s88EbhX1YrWdqn7NYS9bQyA71pyEwSV.tmp&amp;Signature=e7cxOT7vl0ivxOxGGDzFc4joxPs%3D" alt="静态库创建完成"></p><h2 id="2-在主项目中进行相关配置"><a href="#2-在主项目中进行相关配置" class="headerlink" title="2.在主项目中进行相关配置"></a>2.在主项目中进行相关配置</h2><p><img src="https://mytest1oss.oss-cn-beijing.aliyuncs.com/static_lib/s3-1.png?Expires=1568175829&amp;OSSAccessKeyId=TMP.hWnnuiEdPEnEDTFYGRbuDMUVaStTXNp9Ryq6rYamyvRTb4eaxh1vwodGTrhgLGVQBmF9SNcYUEJ1W943WcL4SnxyCutvia2s88EbhX1YrWdqn7NYS9bQyA71pyEwSV.tmp&amp;Signature=FhcxwnXH%2BimLZJ2CnpAtPbzw%2BEw%3D" alt="主项目配置"></p><h2 id="3-在静态库文件中配置需要暴露出的头文件"><a href="#3-在静态库文件中配置需要暴露出的头文件" class="headerlink" title="3.在静态库文件中配置需要暴露出的头文件"></a>3.在静态库文件中配置需要暴露出的头文件</h2><p><img src="https://mytest1oss.oss-cn-beijing.aliyuncs.com/static_lib/s4.png?Expires=1568175852&amp;OSSAccessKeyId=TMP.hWnnuiEdPEnEDTFYGRbuDMUVaStTXNp9Ryq6rYamyvRTb4eaxh1vwodGTrhgLGVQBmF9SNcYUEJ1W943WcL4SnxyCutvia2s88EbhX1YrWdqn7NYS9bQyA71pyEwSV.tmp&amp;Signature=z%2BrIrGhK5G2434lzQWAYU11JhFM%3D" alt="添加暴露的头文件"></p><p>以上步骤操作是不是都很顺利，让人颇有一种岁月静好的既视感，然而问题来了。在我描述问题之前，先说明一下我project的配置。<br>在我的项目中除了自己需要打包发布的静态库文件以外，还需要引入很多第三方的SDK：<code>支付宝</code>、<code>微信</code>、<code>银联</code>、<code>银联ApplePay</code>、<code>QQ钱包</code>、<code>百度钱包</code>用于业务调试。</p><h3 id="问题一："><a href="#问题一：" class="headerlink" title="问题一："></a>问题一：</h3><p>在我需要打包的静态库文件中，需要用到反射<code>NSClassFromString</code>来创建上文提到的SDK中的类以及类对象，然而我尝试了多次未能创建成功。<br>关于这个问题，在stackoverflow搜索到了相关内容</p><blockquote><p><a href="http://stackoverflow.com/questions/2227085/nsclassfromstring-returns-nil" target="_blank" rel="noopener">http://stackoverflow.com/questions/2227085/nsclassfromstring-returns-nil</a></p></blockquote><p>上面提供了一个解决方法：当你需要实例化静态库中的类以及对象时，需要在<code>Build settings</code>-<code>Linking</code>-<code>Other Linking Flags</code>添加<code>-ObjC</code></p><p><img src="https://mytest1oss.oss-cn-beijing.aliyuncs.com/static_lib/s5.png?Expires=1568175873&amp;OSSAccessKeyId=TMP.hWnnuiEdPEnEDTFYGRbuDMUVaStTXNp9Ryq6rYamyvRTb4eaxh1vwodGTrhgLGVQBmF9SNcYUEJ1W943WcL4SnxyCutvia2s88EbhX1YrWdqn7NYS9bQyA71pyEwSV.tmp&amp;Signature=fVaovGhEm6rUDTaZ0yQX3xBcCUs%3D" alt="添加配置"></p><p><strong>注</strong>:设置<code>-ObjC</code>参数时请一定确认是在主项目上添加的，不要添加到自己创建的静态库项目中去了。</p><p>既然已经有解决办法了那就按照方法的指导去做吧，但问题并不是这么容易就能解决的。</p><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二:"></a>问题二:</h3><p>按照上述的解决办法设置完成，<code>command</code>+<code>B</code>一编译结果一片飘红：<br><img src="https://mytest1oss.oss-cn-beijing.aliyuncs.com/static_lib/s6.png?Expires=1568175889&amp;OSSAccessKeyId=TMP.hWnnuiEdPEnEDTFYGRbuDMUVaStTXNp9Ryq6rYamyvRTb4eaxh1vwodGTrhgLGVQBmF9SNcYUEJ1W943WcL4SnxyCutvia2s88EbhX1YrWdqn7NYS9bQyA71pyEwSV.tmp&amp;Signature=SJYCLiiUauiBWzJA2xmtT8hZkyk%3D" alt="错误信息"><br>结果一看错误信息，一个常见错误在项目中引入了同名的文件，但我之前的操作并没有引入新的文件进我的项目中，仅仅是添加了一个<code>-ObjC</code>参数的配置。</p><p>于是我详细查了一下这个参数的意义 </p><blockquote><p>This flag causes the linker to load every object file in the library that defines an Objective-C class or category. While this option will typically result in a larger executable (due to additional object code loaded into the application), it will allow the successful creation of effective Objective-C static libraries that contain categories on existing classes.<br>–<a href="https://developer.apple.com/library/mac/qa/qa1490/_index.html" target="_blank" rel="noopener">https://developer.apple.com/library/mac/qa/qa1490/_index.html</a></p></blockquote><p>大概意思是设置了这个参数会让链接器加载所有Objective-C类和类别，同时也可以加载包含类别的Objective-C的静态库。</p><p>这篇文档的最后一句话给了我启示，在没设置这个参数之前是不会链接静态库文件进行编译的，设置完这个参数之后出现了引入同名文件的错误，只有可能是链接上了一个静态库文件而里面的内容跟我project的代码文件重复了，顺着这个思路我联想到了在<code>2.在主项目中进行相关配置</code>进行的第4步:<br><img src="https://mytest1oss.oss-cn-beijing.aliyuncs.com/static_lib/s7.png?Expires=1568175903&amp;OSSAccessKeyId=TMP.hWnnuiEdPEnEDTFYGRbuDMUVaStTXNp9Ryq6rYamyvRTb4eaxh1vwodGTrhgLGVQBmF9SNcYUEJ1W943WcL4SnxyCutvia2s88EbhX1YrWdqn7NYS9bQyA71pyEwSV.tmp&amp;Signature=fxG9DEs9Esn4yy0fhR5EJuDo644%3D" alt="链接刚创建的静态库文件"><br>可能是添加了<code>-ObjC</code>，链接上了这个静态库文件跟我项目中的代码文件冲突了。定位了问题发生点之后，剩下的就是行动了。果然，删除了这个位置的静态库文件就没有再报错了，项目就可以正常运行了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>踩过这次的坑，做一点总结吧。若你的project不需要引入第三方静态库的时候，可以在主项目中<code>Build Phases</code> - <code>Link Binary With Libraries</code>链接上你自己的静态库文件；若你的project中需要引入第三方静态库,需要在主项目中的<code>Build settings</code>-<code>Linking</code>-<code>Other Linking Flags</code>添加<code>-ObjC</code>参数，就别在<code>Build Phases</code> - <code>Link Binary With Libraries</code>链接上你自己的静态库文件了。</p><p>平时开发的时候一般也不会特别的去关注设置某个参数的意义，只知道需要设置这个参数。而这次踩了坑才回头研究了一下某些参数的意义，果然还是要多掉坑成长才快呐~~~</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><blockquote><p><a href="http://stackoverflow.com/questions/2227085/nsclassfromstring-returns-nil" target="_blank" rel="noopener">http://stackoverflow.com/questions/2227085/nsclassfromstring-returns-nil</a><br><a href="http://stackoverflow.com/questions/24298144/duplicate-symbols-for-architecture-x86-64" target="_blank" rel="noopener">http://stackoverflow.com/questions/24298144/duplicate-symbols-for-architecture-x86-64</a><br><a href="https://developer.apple.com/library/mac/qa/qa1490/_index.html" target="_blank" rel="noopener">https://developer.apple.com/library/mac/qa/qa1490/_index.html</a><br><a href="http://blog.csdn.net/yanglei3kyou/article/details/52020967" target="_blank" rel="noopener">http://blog.csdn.net/yanglei3kyou/article/details/52020967</a></p></blockquote><hr><h2 id="tags-iOS"><a href="#tags-iOS" class="headerlink" title="tags: iOS"></a>tags: iOS</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://mytest1oss.oss-cn-beijing.aliyuncs.com/static_lib/s1.png?Expires=1568175259&amp;amp;OSSAccessKeyId=TMP.hWnnuiEdPEnEDTFYGRbuDMUVaStTXNp9Ryq6rYamyvRTb4eaxh1vwodGTrhgLGVQBmF9SNcYUEJ1W943WcL4SnxyCutvia2s88EbhX1YrWdqn7NYS9bQyA71pyEwSV.tmp&amp;amp;Signature=OiSl8baGWVphfkvU0py2zfaJvg0%3D&quot; alt=&quot;毫无意义的封面图&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;一-概述&quot;&gt;&lt;a href=&quot;#一-概述&quot; class=&quot;headerlink&quot; title=&quot;一.概述&quot;&gt;&lt;/a&gt;一.概述&lt;/h1&gt;&lt;p&gt;日常开发中，静态库的开发总是要花费开发者很大的精力。工作中我们一般都是在项目中进行代码编写，在需要的时候把代码提出来另行打包，若有需求修改或者调试时，总需要把代码或者库拿回原程序中进行测试修改。&lt;br&gt;由于工作需要我要经常修改静态库代码中的内容，恰好最近在静态库联调的时候出现了一些问题，记录下来以后避免踩到这些坑。&lt;br&gt;
    
    </summary>
    
      <category term="mobile development" scheme="http://yoursite.com/categories/mobile-development/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>将代码发布到CocoaPods(trunk方式)</title>
    <link href="http://yoursite.com/2016/07/06/%E5%B0%86%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E5%88%B0CocoaPods(trunk%E6%96%B9%E5%BC%8F)/"/>
    <id>http://yoursite.com/2016/07/06/将代码发布到CocoaPods(trunk方式)/</id>
    <published>2016-07-06T09:39:35.000Z</published>
    <updated>2019-09-11T03:04:02.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>Cocoapods是当前iOS开发最流行的版本依赖工具，开发者使用Cocoapods进行项目的依赖管理会为开发节省不少时间。相信大家都尝试过通过Cocoapods管理自己的项目，但如何将自己开发的代码发布到Cocoapods上让别人也可以搜索使用呢？下面就将介绍trunk方式接入的方法，以及在过程中可能遇到的坑。</p><h1 id="二、注册"><a href="#二、注册" class="headerlink" title="二、注册"></a>二、注册</h1><p>接入的第一步就是要注册trunk，在注册trunk之前需要确认当前的CocoaPods版本必须在0.33以上。若低于该版本请打开Terminal使用ruby的gem命令更新pod：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure><p>若OSX版本在10.11以上请使用以下安装命令</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install -n /usr/local/bin cocoapods</span><br></pre></td></tr></table></figure><p>版本更新结束之后我们开始注册trunk:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk register &lt;邮箱&gt;  &lt;<span class="string">'用户名'</span>&gt; --description=<span class="string">'macbook pro'</span></span><br></pre></td></tr></table></figure><p>其中邮箱是最重要的，因为注册之后pod会往你的邮箱发一封激活邮件，所以邮箱名就当相当于你的trunkID了。至于用户名个人感觉写不写都不太有所谓，–description参数是cocoapods推荐添加的，若以后你在别的设备上登录了trunk方便判断终端信息，也是一个可有可无的参数。点击邮箱中的注册链接，使用下列命令就可以向trunk服务器查询到自己的注册信息。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk me</span><br></pre></td></tr></table></figure><p>输出下列信息即表示注册成功：<br><img src="https://mytest1oss.oss-cn-beijing.aliyuncs.com/pods/pod%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF.jpeg?Expires=1568173037&amp;OSSAccessKeyId=TMP.hWnnuiEdPEnEDTFYGRbuDMUVaStTXNp9Ryq6rYamyvRTb4eaxh1vwodGTrhgLGVQBmF9SNcYUEJ1W943WcL4SnxyCutvia2s88EbhX1YrWdqn7NYS9bQyA71pyEwSV.tmp&amp;Signature=ZMEFDXZINEf8HgcYI4PVRehOvEM%3D" alt="注册信息"></p><a id="more"></a><h1 id="三、配置podspec"><a href="#三、配置podspec" class="headerlink" title="三、配置podspec"></a>三、配置podspec</h1><h2 id="3-1添加podspec文件"><a href="#3-1添加podspec文件" class="headerlink" title="3.1添加podspec文件"></a>3.1添加podspec文件</h2><p><code>podspec</code>文件就相当于你的项目简介，可以让<code>cocoapods</code>搜索引擎知道作者名、项目概述、版本号、源代码地址、依赖库等信息，因此<code>cocoapods</code>上的每个项目都会有一个<code>podspec</code>描述文件。<code>cocoapods</code>在<code>Github</code>上通过一个repo来管理所有支持<code>cocoapods</code>的代码<a href="https://github.com/CocoaPods/Specs" target="_blank" rel="noopener">https://github.com/CocoaPods/Specs</a>。<br>如何创建一个podspec文件呢？我们可以通过：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec create &lt;name&gt;</span><br></pre></td></tr></table></figure><p>来创建一个podspec文件，但官方的spec文件写的非常冗余，看起来不够简明，如果是第一次写podspec官方的spec文件还是可以去看一下的，毕竟文档注释比较详细。最终还是建议参考github上各种开源库上的podspec文件来进行自身项目的podspec文件配置，在此分享出自己编辑的podspec文件来供大家学习交流。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></span><br><span class="line">s.name = <span class="string">"ipaynowplugin"</span></span><br><span class="line">s.version = <span class="string">"1.7.3.42"</span></span><br><span class="line">s.summary = <span class="string">"ipaynowplugin SDK"</span></span><br><span class="line">s.description = &lt;&lt;-DESC</span><br><span class="line">   Help developer to quickly intergrate variety of payment methods</span><br><span class="line">DESC</span><br><span class="line">s.homepage = <span class="string">"http://www.ipaynow.cn"</span></span><br><span class="line">s.license = <span class="string">"MIT"</span></span><br><span class="line">s.author = &#123; <span class="string">"Hstripe"</span> =&gt; <span class="string">"huangrui@ipaynow.cn"</span> &#125;</span><br><span class="line">s.platform = <span class="symbol">:ios</span>, <span class="string">'6.0'</span></span><br><span class="line">s.source = &#123; <span class="symbol">:git</span> =&gt; <span class="string">"https://github.com/Hstripe/libipaynow.git"</span>, <span class="symbol">:tag</span> =&gt; s.version &#125;</span><br><span class="line">s.default_subspec = <span class="string">'Core'</span></span><br><span class="line">s.requires_arc = <span class="literal">true</span></span><br><span class="line">s.subspec <span class="string">'Core'</span> <span class="keyword">do</span> <span class="params">|core|</span></span><br><span class="line">core.source_files = <span class="string">"lib/*.h"</span></span><br><span class="line">core.public_header_files = <span class="string">"lib/*.h"</span></span><br><span class="line">core.vendored_libraries = <span class="string">"lib/*.a"</span></span><br><span class="line">core.resource = <span class="string">"lib/*.bundle"</span></span><br><span class="line">core.frameworks = <span class="string">"CoreGraphics"</span>, <span class="string">"CoreTelephony"</span>,<span class="string">"QuartzCore"</span>,<span class="string">"SystemConfiguration"</span>,<span class="string">"Security"</span>,<span class="string">"Foundation"</span>,<span class="string">"UIKit"</span></span><br><span class="line">core.ios.library = <span class="string">'z'</span>, <span class="string">'sqlite3.0'</span>,<span class="string">'c++'</span>, <span class="string">'stdc++'</span></span><br><span class="line">core.xcconfig = &#123; <span class="string">'OTHER_LDFLAGS'</span> =&gt; <span class="string">'-ObjC'</span> &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">s.subspec <span class="string">'Alipay'</span> <span class="keyword">do</span> <span class="params">|ali|</span></span><br><span class="line">ali.ios.vendored_frameworks = <span class="string">"lib/Channels/AliPayPlugin/AlipaySDK.framework"</span></span><br><span class="line">ali.resource = <span class="string">"lib/Channels/AliPayPlugin/AlipaySDK.bundle"</span></span><br><span class="line">ali.dependency <span class="string">"ipaynowplugin/Core"</span></span><br><span class="line">ali.frameworks = <span class="string">"CoreMotion"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">s.subspec <span class="string">'Weixin'</span> <span class="keyword">do</span> <span class="params">|wx|</span></span><br><span class="line">wx.ios.vendored_libraries = <span class="string">"lib/Channels/WechatPlugin/*.a"</span></span><br><span class="line">wx.source_files = <span class="string">"lib/Channels/WechatPlugin/*.h"</span></span><br><span class="line">wx.public_header_files = <span class="string">"lib/Channels/WechatPlugin/*.h"</span></span><br><span class="line">wx.dependency <span class="string">"ipaynowplugin/Core"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">s.subspec <span class="string">'Unionpay'</span> <span class="keyword">do</span> <span class="params">|up|</span></span><br><span class="line">up.vendored_libraries = <span class="string">'lib/Channels/UPPayPlugin/*.a'</span></span><br><span class="line">up.source_files = <span class="string">'lib/Channels/UPPayPlugin/*.h'</span></span><br><span class="line">up.dependency <span class="string">'ipaynowplugin/Core'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">s.subspec <span class="string">'ApplePay'</span> <span class="keyword">do</span> <span class="params">|ap|</span></span><br><span class="line">ap.source_files = <span class="string">'lib/Channels/UPApplePay/*.h'</span></span><br><span class="line">ap.public_header_files = <span class="string">'lib/Channels/UPApplePay/*.h'</span></span><br><span class="line">ap.vendored_libraries = <span class="string">'lib/Channels/UPApplePay/*.a'</span></span><br><span class="line">ap.dependency <span class="string">'ipaynowplugin/Core'</span></span><br><span class="line">ap.frameworks = <span class="string">"PassKit"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>接下来对几个参数进行简要的说明:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s.name 就是你的项目名了,通过之后可以使用pod search命令搜索到；</span><br><span class="line">s.version 项目当前的版本号；</span><br><span class="line">s.summary 项目的概要描述；</span><br><span class="line">s.description 项目的详细描述；</span><br><span class="line">s.license 许可文件，这个是cocoapods必须要求若没有会无法通过验证；</span><br><span class="line">s.source 项目源代码位置，一般就是一个github地址；</span><br><span class="line">s.default_subspec 项目默认加载的子包，由于我的项目是由多个包构成的所以我会添加这项，若项目只有一个包则不用填写这个参数；</span><br></pre></td></tr></table></figure><p>以下这几个参数比较重要：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">core.source_files 项目主要文件；</span><br><span class="line">core.public_header_files 暴露出的头文件；</span><br><span class="line">core.vendored_libraries  项目封的静态库（根据项目类型：开源、闭源，没有可不填）；</span><br><span class="line">core.resource  项目用的资源文件（图片之类的）；</span><br><span class="line">core.frameworks 依赖的系统的framework框架 ；</span><br><span class="line">core.ios.library 依赖的系统的lib库文件；</span><br></pre></td></tr></table></figure><p>完成以上参数配置之后，接着进行下一步</p><h2 id="3-2-本地检查"><a href="#3-2-本地检查" class="headerlink" title="3.2 本地检查"></a>3.2 本地检查</h2><p>完成<code>podspec</code>描述文件的参数配置之后，最好是先进行<code>podspec</code>文件的本地检查，命令如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib lint --verbose</span><br></pre></td></tr></table></figure><p>verbose的作用是输出过程中的调试信息方便我们查错，若有错误的话根据<code>Build Failed</code>中的错误信息进行<code>podspec</code>内容的修改。<br>如果输入终端执行完之后，显示的是如下信息：<br><img src="https://mytest1oss.oss-cn-beijing.aliyuncs.com/pods/pod%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F.png?Expires=1568173069&amp;OSSAccessKeyId=TMP.hWnnuiEdPEnEDTFYGRbuDMUVaStTXNp9Ryq6rYamyvRTb4eaxh1vwodGTrhgLGVQBmF9SNcYUEJ1W943WcL4SnxyCutvia2s88EbhX1YrWdqn7NYS9bQyA71pyEwSV.tmp&amp;Signature=J3mt%2FFjI0Y2rUI2Th3I%2Bb2fyE2o%3D" alt="检查成功"><br>那么恭喜你，我们可以进行下一步了。</p><h2 id="3-3-通过Trunk-push-podspec文件"><a href="#3-3-通过Trunk-push-podspec文件" class="headerlink" title="3.3 通过Trunk push podspec文件"></a>3.3 通过Trunk push podspec文件</h2><p>1.在进行trunk push之前，首先确保你已经把你的项目文件上传到<code>Github</code>上了，若还没上传源码，可以用终端<code>cd</code>到项目文件夹执行一下操作上传代码到<code>Github</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;版本内容&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>2.为你上传上去的代码打上tag标签，使得<code>cocoapods</code>可以更精确的查找到你的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag &apos;tagNum&apos;</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><p>所有准备工作完成之后，就开始最核心的工作trunk push了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk push yourProjectName.podsepc --verbose  文件名称请修改成自己的podspec名称</span><br></pre></td></tr></table></figure><blockquote><p>上面的代码做了三件事：<br>1、验证你的podspec文件是否合法,在trunk方式之前我们已经用了“pod lib lint”命令进行验证；<br>2、上传podspec文件到trunk服务器,最终还是会上传到<code>https://github.com/CocoaPods/Specs</code>中；<br>3、将你上传的podspec文件转成json格式文件。</p></blockquote><p>通过本地<code>pod lib lint</code>的文件一般而言都不会出什么问题，发生概率最大的问题可能就是由于网不给力，导致连接<code>GitHub</code>困难。上传成功之后，就可以使用<br><code>pod search</code> 命令来搜索自己的项目了。</p><p>如果<code>pod search</code>不到自己的项目，就需要再手动<code>pod setup</code>一次来同步自己本地的spec repo，这个过程总是漫长且带有痛苦的，所以建议更新的时候挂着VPN。</p><h1 id="四、后续项目的升级"><a href="#四、后续项目的升级" class="headerlink" title="四、后续项目的升级"></a>四、后续项目的升级</h1><p>当你的项目做出了修改之后，当然希望cocoapods中的版本也进行更新。此时就需要更新<code>podspec</code>描述文件了，将<code>podspec</code>文件改成符合你当前版本的需求之后。还需要给你<code>GitHub</code>上的版本打上tag，而且一定要和<code>podspec</code>中的<code>s.version</code>一致。</p><p>顺带一提的是<code>podspec</code>是没有“后悔药”功能的，你一旦发现你当前版本与<code>podspec</code>描述文件填写不符，你是无法修改当前版本的<code>podspec</code>的只能提到下个版本中进行修改,这也是一个比较坑的地方，因此在填写<code>podspec</code>文件的时候务必要小心谨慎才是。</p><h1 id="五、参考文档"><a href="#五、参考文档" class="headerlink" title="五、参考文档"></a>五、参考文档</h1><blockquote><p><a href="http://www.cnblogs.com/wengzilin/p/4742530.html" target="_blank" rel="noopener">http://www.cnblogs.com/wengzilin/p/4742530.html</a><br><a href="http://www.jianshu.com/p/0b516ee6576f/" target="_blank" rel="noopener">http://www.jianshu.com/p/0b516ee6576f/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h1&gt;&lt;p&gt;Cocoapods是当前iOS开发最流行的版本依赖工具，开发者使用Cocoapods进行项目的依赖管理会为开发节省不少时间。相信大家都尝试过通过Cocoapods管理自己的项目，但如何将自己开发的代码发布到Cocoapods上让别人也可以搜索使用呢？下面就将介绍trunk方式接入的方法，以及在过程中可能遇到的坑。&lt;/p&gt;
&lt;h1 id=&quot;二、注册&quot;&gt;&lt;a href=&quot;#二、注册&quot; class=&quot;headerlink&quot; title=&quot;二、注册&quot;&gt;&lt;/a&gt;二、注册&lt;/h1&gt;&lt;p&gt;接入的第一步就是要注册trunk，在注册trunk之前需要确认当前的CocoaPods版本必须在0.33以上。若低于该版本请打开Terminal使用ruby的gem命令更新pod：&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo gem install cocoapods&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;若OSX版本在10.11以上请使用以下安装命令&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo gem install -n /usr/local/bin cocoapods&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;版本更新结束之后我们开始注册trunk:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod trunk register &amp;lt;邮箱&amp;gt;  &amp;lt;&lt;span class=&quot;string&quot;&gt;&#39;用户名&#39;&lt;/span&gt;&amp;gt; --description=&lt;span class=&quot;string&quot;&gt;&#39;macbook pro&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中邮箱是最重要的，因为注册之后pod会往你的邮箱发一封激活邮件，所以邮箱名就当相当于你的trunkID了。至于用户名个人感觉写不写都不太有所谓，–description参数是cocoapods推荐添加的，若以后你在别的设备上登录了trunk方便判断终端信息，也是一个可有可无的参数。点击邮箱中的注册链接，使用下列命令就可以向trunk服务器查询到自己的注册信息。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod trunk me&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出下列信息即表示注册成功：&lt;br&gt;&lt;img src=&quot;https://mytest1oss.oss-cn-beijing.aliyuncs.com/pods/pod%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF.jpeg?Expires=1568173037&amp;amp;OSSAccessKeyId=TMP.hWnnuiEdPEnEDTFYGRbuDMUVaStTXNp9Ryq6rYamyvRTb4eaxh1vwodGTrhgLGVQBmF9SNcYUEJ1W943WcL4SnxyCutvia2s88EbhX1YrWdqn7NYS9bQyA71pyEwSV.tmp&amp;amp;Signature=ZMEFDXZINEf8HgcYI4PVRehOvEM%3D&quot; alt=&quot;注册信息&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mobile development" scheme="http://yoursite.com/categories/mobile-development/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
</feed>
